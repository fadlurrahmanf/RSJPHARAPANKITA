[
    {
        "id": "bca4771a12cb11e6",
        "type": "tab",
        "label": "System",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "12638c94c64653f3",
        "type": "tab",
        "label": "Local Interface",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e9b71a55.b25c68",
        "type": "subflow",
        "name": "Loops",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "9f7aa00f.d31ab"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 640,
                "y": 40,
                "wires": [
                    {
                        "id": "f2a7b456.1521f8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 460,
                "y": 220,
                "wires": [
                    {
                        "id": "6b0c2d4d.1d2934",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "cbbdeba1125ca19b",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Gateway",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "61569cd1264aebef",
            "1ec9c25db1122edf",
            "4c80d3fd31ff5440",
            "dd1e1bf4fa001f32",
            "31ef301a128c4b66",
            "2815e1177e773fe4",
            "d98271f4f071f32e"
        ],
        "x": 34,
        "y": 19,
        "w": 442,
        "h": 142
    },
    {
        "id": "1cbfcd06637d48ad",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "initiate Boot",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "62a153d4d974c23e",
            "4958a8f1dc7bf670",
            "a421582f2823dadb",
            "1b3e437abd5cab62",
            "09187eb453511326",
            "fe9d2d5c8508a0c3",
            "b772f366ad097492",
            "5df25e4c89a32048"
        ],
        "x": 724,
        "y": 19,
        "w": 952,
        "h": 142
    },
    {
        "id": "aadd16a462e83be5",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Execute SQL",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "ed77b13627de379d",
            "2b3434178f0ac999",
            "9d6f10db5c0fea06",
            "cf128b17d11f7fc7"
        ],
        "x": 484,
        "y": 19,
        "w": 222,
        "h": 142
    },
    {
        "id": "8be50af1826bf3eb",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "IncomingData",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "94514e5dd76e1b4a",
            "0cbc509033550b7f",
            "92b7c675366c9d8d",
            "f41842a72cb70323",
            "5b8d8dea5122397e",
            "83efeb6b5a73d7c6",
            "df5d05325874622c",
            "f653f7df10385059",
            "91c1d36297a0c7fd",
            "f20849a9ab1503b2",
            "a647954ae4d429aa",
            "fb1bf2e163b3c7a9"
        ],
        "x": 34,
        "y": 179,
        "w": 1182,
        "h": 122
    },
    {
        "id": "61b2c6fee1e1e6a8",
        "type": "group",
        "z": "12638c94c64653f3",
        "name": "Developer Debug",
        "style": {
            "label": true,
            "fill": "#e3f3d3"
        },
        "nodes": [
            "ae459cb84c6fb828",
            "a07e8f90b297d827",
            "ecf99e1674c37281",
            "1c68bf52134e0fe0"
        ],
        "x": 54,
        "y": 59,
        "w": 792,
        "h": 82
    },
    {
        "id": "08e96d47ded9c2f2",
        "type": "group",
        "z": "12638c94c64653f3",
        "name": "Get Data From MySQL",
        "style": {
            "label": true,
            "fill": "#bfdbef"
        },
        "nodes": [
            "725b446197e7c4b5",
            "022e9895230ac2ce",
            "813969837ca2e43c",
            "dbcc260e20c738be",
            "43ed28f7c305890b",
            "af66a956d2da2a80",
            "598846368d18598c",
            "69415a5df0fd84c4",
            "0b9dbd448b207cde",
            "6dd67c331fda82b6",
            "f51a64beaac17f77",
            "4694e999e7859d61"
        ],
        "x": 54,
        "y": 179,
        "w": 792,
        "h": 202
    },
    {
        "id": "03d26eaca8acd225",
        "type": "group",
        "z": "12638c94c64653f3",
        "name": "Set Thermostats",
        "style": {
            "label": true,
            "fill": "#dbcbe7"
        },
        "nodes": [
            "784018e13e7c3854",
            "1df172a7f2f4ce6f",
            "4e770fef67f689a3",
            "33d61628fd38b924",
            "24dd9e1c51bd7bcf",
            "375be8b9dde709a6",
            "4f80bdf1c80177c1",
            "7cf831fbd7e15766",
            "99f4c9c990d12fad",
            "632dc6d6e0490659",
            "40f57b3a5e3f83af",
            "35a996afe3bfd958",
            "fd9c82c86561755f",
            "dad3e82fef0faa4b",
            "adf67cd97e33ce45",
            "d5f50e537010bec1",
            "35cb9bc2441860b6",
            "76e681351b7ebfb1"
        ],
        "x": 44,
        "y": 419,
        "w": 1122,
        "h": 242
    },
    {
        "id": "b39815c0aef9d02e",
        "type": "group",
        "z": "12638c94c64653f3",
        "name": "Insert Database",
        "style": {
            "label": true,
            "fill": "#ffbfbf"
        },
        "nodes": [
            "be230af5a7c07cf0",
            "0085262b1f8b7920",
            "c47e2b8443325cfd",
            "0bdff582212b9d15"
        ],
        "x": 54,
        "y": 679,
        "w": 1132,
        "h": 82
    },
    {
        "id": "7ff6db086b81b7e7",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "SystemClock",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "cc64b14b4d983e3f",
            "fa3bcb095fdfb9a7",
            "b07e4e6ebad074fb",
            "ae03f26ebfda2cf1",
            "6b0dbecee3dd961c",
            "53ef936abb21b675",
            "962ac3a3ae6cb677",
            "5c0e450f5d574f30",
            "eeaad9e4a7b40fec",
            "e824b89db0dcadfc",
            "c3f008a339c97a2e",
            "78f55615c04a1769",
            "6345195148b114ad",
            "5a9616ba520d413a",
            "3b2a44cd4136616d"
        ],
        "x": 34,
        "y": 319,
        "w": 722,
        "h": 302
    },
    {
        "id": "94afd02c3878fc20",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Run Loop",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "98d4b79922df7538",
            "5dfb8dd8c390d971",
            "996b8741f6785be0",
            "6c88cbac6c1e1314",
            "26120895f3f84739",
            "340b6dc447cb3a1f",
            "811d40e949e9fef1",
            "c7d1752efe372b78",
            "f76630c041b6c74a",
            "32dded3e3ceacf4c",
            "53fcd0a658899b61",
            "d1d6d888207e0204",
            "4d48619bf5bbadca",
            "b1e9832db3a61f1b",
            "c476e780880d1b2d",
            "0a7ea2c4e927a1bd",
            "034e761815e481f6"
        ],
        "x": 34,
        "y": 639,
        "w": 722,
        "h": 302
    },
    {
        "id": "b2cfefbaa250692d",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "MonitoringTempRH",
        "style": {
            "label": true,
            "color": "#000000",
            "label-position": "n"
        },
        "nodes": [
            "8f99e09dae854b85",
            "14f91a50d6904e88",
            "b1b2db7babdaf54b",
            "3ac72ba11294aa01",
            "022a029521e3c1dd",
            "699bc22c1a819a76",
            "88395c793067a2e5"
        ],
        "x": 764,
        "y": 539,
        "w": 712,
        "h": 122
    },
    {
        "id": "6a72c936b627e910",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Turn On Heater",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "b7a0b469689fefd3",
            "ede82a4075db7adf",
            "db7e71f59821125d",
            "89f81b486a2b2f8d",
            "4776d2059a76e625",
            "e181d40ba2c883c6",
            "7ef3d8868618eb2f",
            "8099edeb0376bcea",
            "efd4c15eee3524d0",
            "99d7acf34720e090",
            "bf104e7cca1d96a0",
            "16853bc05e3e9d02",
            "6a4f334d1f97ed84"
        ],
        "x": 764,
        "y": 679,
        "w": 1192,
        "h": 142
    },
    {
        "id": "efd67cff70aea370",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Running Heater",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "86d93e43ac494bd0",
            "74eb172db82ec21b",
            "5325683f3d621a49",
            "9e6d9789580139b4",
            "d7f5d1cda8b9c2e4",
            "aa65a38826eefec0",
            "a88f76740bd895c4",
            "ab10a2b4ace98698",
            "9f44d28a524d189a",
            "fe15437ea5ba0d90",
            "07348a1e922e2081"
        ],
        "x": 34,
        "y": 959,
        "w": 722,
        "h": 162
    },
    {
        "id": "1aacce764e0ed47b",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Turn Off Heater",
        "style": {
            "label": true,
            "color": "#000000",
            "label-position": "n"
        },
        "nodes": [
            "1658ac7b84089f6b",
            "a432e9a4cfafa890",
            "dae22984db30bba3",
            "0494c8d6085a4cf0",
            "01fea39265f2dc97",
            "710352610b5171f7",
            "44ece0d16efb9af2",
            "fcded8e6800db872",
            "d802d6a814ceb1d0",
            "ddab33048d01b3d5",
            "2ee5fb66a447ff24",
            "300675ed5fd9466c",
            "b48cfcb16da97cdb"
        ],
        "x": 764,
        "y": 839,
        "w": 1212,
        "h": 142
    },
    {
        "id": "9965847832a173f9",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Shutdown",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "3f972b9577eb5b33",
            "6d5f07b04733e577",
            "b4d32bd3897234eb",
            "a040cdd296f89df4",
            "79d1e5f400e8c545",
            "40fa6128af8ba52d",
            "3e2e3138c0de2877",
            "1a293fbb3e81e268",
            "42ef840fe439670f",
            "46451fec39f8e841",
            "c2895618f3b4cdb7",
            "e630b236c1d2b8ee",
            "5ee28832d25a6f45",
            "feb7c55006e92cde",
            "3e9c807a44ff9c54",
            "888e06c328ef570b",
            "1da0caa3cc640452",
            "f31779116c5bb821",
            "804d088f9d9f9e16",
            "1dda750ca3d657ba",
            "da20796f860b477b",
            "59463c781eab1470",
            "b8560362bc1218d2",
            "02e193578a41d279",
            "35702a825d7ea7f1",
            "6caf09005d5d4f8c",
            "d1cda63e22d46295",
            "6a6b80ccb9539197",
            "b8b6158225a70a1c",
            "2138ff8d3224b227",
            "86889498473ea3c1",
            "05f650927ae5c01f",
            "4cfc816ed42ed14a",
            "05fbb05ae3d0d88a",
            "d4819d014b224568",
            "e3bcbeb548a43740",
            "8daff62f0555fe14",
            "35b570617ff00f4c",
            "8567b6fea0c1832e"
        ],
        "x": 764,
        "y": 999,
        "w": 1342,
        "h": 282
    },
    {
        "id": "4a2b08a3489a859c",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Pre Run Loop",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "35a56d8a804f6957",
            "1c505eaeda7d6b6a",
            "9a489bd4e0857cbf",
            "525a257b01798881",
            "fbfbf9d305f0d43a",
            "4da408452df5e1e3",
            "ea14610f882fc427",
            "77b2cba796d2f531",
            "4043dbbf93d75df2",
            "a5409b65184165d3",
            "ec5ef574d79e5506",
            "a27a7d74181d73f9",
            "a1807d9433fd3b20",
            "8f7f8be627e7f4d2",
            "1c2dcf8730950b3f",
            "62b6001d94bcac60",
            "a6711d252207f1c0",
            "95c264c90bd714f9",
            "5936f1df53932369",
            "266dedab938cb002",
            "09a3b6a802023dc8",
            "631a5792b3f53e2e",
            "96bdfb3b96f0e2d1",
            "3b732ba5f038697e",
            "fe72150586726874"
        ],
        "x": 764,
        "y": 319,
        "w": 1492,
        "h": 202
    },
    {
        "id": "a31f151e4e5d7b60",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Receive On/Off from Interface",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "cad8d9fb0b3b7dab",
            "f3ac2cdc7fa4373e",
            "02d4dc0e2995b26c",
            "8cb74b9b019d03ca",
            "92f4b7d9aa20de7b",
            "0e3f4cd8e2a0e530",
            "80511c5878e7f281"
        ],
        "x": 1234,
        "y": 179,
        "w": 752,
        "h": 122
    },
    {
        "id": "8198882257923722",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Simulation",
        "style": {
            "label": true,
            "color": "#000000",
            "label-position": "n"
        },
        "nodes": [
            "93ed58172caefb99",
            "4870b9a1b400f946",
            "ab5c7999a8ec94cb",
            "8232630545be6324",
            "f2f9d8c7c79d7352",
            "a132d3a11d6a78c2",
            "4506e171551a05b6",
            "b3f450d927ca57aa",
            "04086c37d4da49b1",
            "e9dce8c2968fc362",
            "d00f6db0ab2d050c",
            "08ce2e838792223b",
            "3f493871e6270acf",
            "42579082ec0f3bf3",
            "b717f2522f8a0316",
            "fbb662a0c4d897d8",
            "67e6722eebecb451",
            "80365610c054e775",
            "6010df32067d351f",
            "0c502b1bde54a0fc",
            "4ef7115bf6b00b61"
        ],
        "x": 354,
        "y": 1139,
        "w": 402,
        "h": 442
    },
    {
        "id": "9a2233b4c5e85c0f",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Check Relay Function",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "705a03382e48fbaa",
            "efe1a2d2448d86c1",
            "13ed67235efcb4e7",
            "9ecba9cebe6176a2",
            "3c0def953a7880c0",
            "c7db0b52451bd342",
            "065b11c9b9020e33",
            "1f8f8dcba5857b3f",
            "d072fc3ec94d6a47",
            "f5e931f2c8849151"
        ],
        "x": 764,
        "y": 1299,
        "w": 382,
        "h": 202
    },
    {
        "id": "73fe2eb92fbe359c",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Sensors",
        "style": {
            "label": true,
            "color": "#000000",
            "label-position": "n"
        },
        "nodes": [
            "7ea2e7c17a42eba4",
            "694bf36843b2868e",
            "40a624a1f8f16c78",
            "0394ccbdad96488f",
            "d6aa40b162d6b292",
            "eaea2c3e22a96a9f",
            "a37180a17c8d6d8e",
            "510cccceaeed9bec",
            "c4f972fcf9162c5b",
            "042300e6b0e72670",
            "12622275c3de0746"
        ],
        "x": 1164,
        "y": 1299,
        "w": 462,
        "h": 362
    },
    {
        "id": "d30f8d72cc7e3f14",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Status Relay Base On Output Info",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "fdb500481cbf7d01",
            "7a293eedb6b117a7",
            "06fb4a2bad3b8364",
            "131878eb934f5207",
            "0527f01b52cc60a2"
        ],
        "x": 1644,
        "y": 1299,
        "w": 262,
        "h": 202
    },
    {
        "id": "02835126ba65ad94",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Status Relay base On Input Info",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "55557f20a1962080",
            "7f8325ca8f5e07a8",
            "c361579d7bcf203c",
            "4b9e8cdbb6bea80b",
            "caea8b0f760c7213"
        ],
        "x": 1924,
        "y": 1299,
        "w": 262,
        "h": 202
    },
    {
        "id": "bc029c22e8a19bce",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "StatusRelay",
        "style": {
            "label": true,
            "label-position": "n",
            "color": "#000000"
        },
        "nodes": [
            "738e22f45c2ce650",
            "c04809c8d4f3f6d5",
            "5644d3499103fcdb",
            "35a58c5190c3dfd4",
            "b851603d2bbe2e65",
            "db1d8ffdb99c0bc7"
        ],
        "x": 34,
        "y": 1139,
        "w": 312,
        "h": 322
    },
    {
        "id": "266dedab938cb002",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "x": 2160,
        "y": 360,
        "wires": [
            [
                "95c264c90bd714f9"
            ]
        ]
    },
    {
        "id": "09a3b6a802023dc8",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "x": 2160,
        "y": 400,
        "wires": [
            [
                "95c264c90bd714f9"
            ]
        ]
    },
    {
        "id": "631a5792b3f53e2e",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "x": 2160,
        "y": 440,
        "wires": [
            [
                "95c264c90bd714f9"
            ]
        ]
    },
    {
        "id": "96bdfb3b96f0e2d1",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "x": 2160,
        "y": 480,
        "wires": [
            [
                "95c264c90bd714f9"
            ]
        ]
    },
    {
        "id": "e3bcbeb548a43740",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "x": 2010,
        "y": 1040,
        "wires": [
            [
                "d4819d014b224568"
            ]
        ]
    },
    {
        "id": "8daff62f0555fe14",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "x": 2010,
        "y": 1080,
        "wires": [
            [
                "d4819d014b224568"
            ]
        ]
    },
    {
        "id": "35b570617ff00f4c",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "x": 2010,
        "y": 1120,
        "wires": [
            [
                "d4819d014b224568"
            ]
        ]
    },
    {
        "id": "8567b6fea0c1832e",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "x": 2010,
        "y": 1160,
        "wires": [
            [
                "d4819d014b224568"
            ]
        ]
    },
    {
        "id": "08ce2e838792223b",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "x": 600,
        "y": 1180,
        "wires": [
            [
                "ab5c7999a8ec94cb"
            ]
        ]
    },
    {
        "id": "3f493871e6270acf",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "x": 600,
        "y": 1220,
        "wires": [
            [
                "ab5c7999a8ec94cb"
            ]
        ]
    },
    {
        "id": "42579082ec0f3bf3",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "x": 600,
        "y": 1260,
        "wires": [
            [
                "ab5c7999a8ec94cb"
            ]
        ]
    },
    {
        "id": "b717f2522f8a0316",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "x": 600,
        "y": 1300,
        "wires": [
            [
                "ab5c7999a8ec94cb"
            ]
        ]
    },
    {
        "id": "fbb662a0c4d897d8",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "x": 600,
        "y": 1340,
        "wires": [
            [
                "ab5c7999a8ec94cb"
            ]
        ]
    },
    {
        "id": "67e6722eebecb451",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "x": 600,
        "y": 1380,
        "wires": [
            [
                "ab5c7999a8ec94cb"
            ]
        ]
    },
    {
        "id": "80365610c054e775",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "x": 600,
        "y": 1420,
        "wires": [
            [
                "ab5c7999a8ec94cb"
            ]
        ]
    },
    {
        "id": "6010df32067d351f",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "x": 600,
        "y": 1460,
        "wires": [
            [
                "ab5c7999a8ec94cb"
            ]
        ]
    },
    {
        "id": "0c502b1bde54a0fc",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "x": 600,
        "y": 1500,
        "wires": [
            [
                "ab5c7999a8ec94cb"
            ]
        ]
    },
    {
        "id": "4ef7115bf6b00b61",
        "type": "junction",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "x": 600,
        "y": 1540,
        "wires": [
            [
                "ab5c7999a8ec94cb"
            ]
        ]
    },
    {
        "id": "3b8e5eb93b7526d7",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "rsjpharapankita",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "415d098faf23ad7c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "9f7aa00f.d31ab",
        "type": "function",
        "z": "e9b71a55.b25c68",
        "name": "InitiateLoop",
        "func": "var data = msg.payload;\nvar limit = data.length;\nflow.set(\"data\",data);\nflow.set(\"limit\",limit);\nmsg.topic = \"0\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 40,
        "wires": [
            [
                "f2a7b456.1521f8"
            ]
        ]
    },
    {
        "id": "f2a7b456.1521f8",
        "type": "function",
        "z": "e9b71a55.b25c68",
        "name": "Loop",
        "func": "var data = flow.get(\"data\");\nvar count = parseInt(msg.topic);\nmsg.payload = data[count];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 40,
        "wires": [
            [
                "31bc9e4a.f0c962"
            ]
        ]
    },
    {
        "id": "26ad85dd.1a426a",
        "type": "link in",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "6e495066.b7de"
        ],
        "x": 215,
        "y": 80,
        "wires": [
            [
                "f2a7b456.1521f8"
            ]
        ]
    },
    {
        "id": "31bc9e4a.f0c962",
        "type": "link out",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "4642e834.27d108"
        ],
        "x": 395,
        "y": 80,
        "wires": []
    },
    {
        "id": "6e495066.b7de",
        "type": "link out",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "26ad85dd.1a426a"
        ],
        "x": 615,
        "y": 180,
        "wires": []
    },
    {
        "id": "4642e834.27d108",
        "type": "link in",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "31bc9e4a.f0c962"
        ],
        "x": 95,
        "y": 180,
        "wires": [
            [
                "db2b7400.81c1e8"
            ]
        ]
    },
    {
        "id": "db2b7400.81c1e8",
        "type": "function",
        "z": "e9b71a55.b25c68",
        "name": "Increment",
        "func": "var limit = flow.get(\"limit\");\nvar count = parseInt(msg.topic);\ncount++;\nif(count>=limit){\n    msg.payload = null;\n}\nmsg.topic = String(count);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 200,
        "y": 180,
        "wires": [
            [
                "6b0c2d4d.1d2934"
            ]
        ]
    },
    {
        "id": "6b0c2d4d.1d2934",
        "type": "switch",
        "z": "e9b71a55.b25c68",
        "name": "Continue?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 180,
        "wires": [
            [
                "f20c27b7.bee1c8"
            ],
            []
        ]
    },
    {
        "id": "f20c27b7.bee1c8",
        "type": "delay",
        "z": "e9b71a55.b25c68",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 500,
        "y": 180,
        "wires": [
            [
                "6e495066.b7de"
            ]
        ]
    },
    {
        "id": "61569cd1264aebef",
        "type": "mqtt in",
        "z": "bca4771a12cb11e6",
        "g": "cbbdeba1125ca19b",
        "name": "",
        "topic": "iota238/data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "415d098faf23ad7c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 60,
        "wires": [
            [
                "4c80d3fd31ff5440"
            ]
        ]
    },
    {
        "id": "1ec9c25db1122edf",
        "type": "mqtt out",
        "z": "bca4771a12cb11e6",
        "g": "cbbdeba1125ca19b",
        "name": "",
        "topic": "iota238/cmd",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "415d098faf23ad7c",
        "x": 380,
        "y": 60,
        "wires": []
    },
    {
        "id": "4c80d3fd31ff5440",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "cbbdeba1125ca19b",
        "name": "IncomingData",
        "mode": "link",
        "links": [
            "0cbc509033550b7f",
            "d98271f4f071f32e"
        ],
        "x": 235,
        "y": 60,
        "wires": []
    },
    {
        "id": "0cbc509033550b7f",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": "link in 1",
        "links": [
            "4c80d3fd31ff5440",
            "ab5c7999a8ec94cb",
            "6776bbaf798955cd",
            "c6ccaf078e16fab4"
        ],
        "x": 75,
        "y": 240,
        "wires": [
            [
                "94514e5dd76e1b4a"
            ]
        ]
    },
    {
        "id": "ed77b13627de379d",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "g": "aadd16a462e83be5",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 610,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "5b8d8dea5122397e",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": "(networkID)",
        "property": "networkid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "04",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "04",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 240,
        "wires": [
            [
                "83efeb6b5a73d7c6"
            ],
            [
                "fb1bf2e163b3c7a9"
            ]
        ]
    },
    {
        "id": "83efeb6b5a73d7c6",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": "Parse",
        "func": "msg.deviceinfo = msg.payload[0];\nvar data = msg.realdata;\nvar numBytes = data.length / 2;\nvar byteArray = new Uint8Array(numBytes);\nfor (var i=0; i<numBytes; i++) {\n    byteArray[i] = parseInt(data.substr(i*2, 2), 16);\n}\nvar len = byteArray[3];\nvar byteData = new Uint8Array(len);\nfor (i=0; i<len; i++) {\n    byteData[i] = byteArray[i+4];\n}\nmsg.payload = byteData;\nmsg.data = data.substr(0,6);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 220,
        "wires": [
            [
                "df5d05325874622c"
            ]
        ]
    },
    {
        "id": "df5d05325874622c",
        "type": "cayennelpp-decoder",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": "decoder",
        "x": 840,
        "y": 220,
        "wires": [
            [
                "91c1d36297a0c7fd"
            ]
        ]
    },
    {
        "id": "91c1d36297a0c7fd",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": " Build",
        "func": "var data = msg.payload;\ndata.networkid = msg.data.substring(0,2);\ndata.devid = msg.data.substring(2,4);\ndata.typeid = msg.data.substring(4,6);\ndata.epoch = (Date.now());\nmsg.payload = data;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 220,
        "wires": [
            [
                "f20849a9ab1503b2"
            ]
        ]
    },
    {
        "id": "f41842a72cb70323",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": " Listed?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 420,
        "y": 240,
        "wires": [
            [
                "5b8d8dea5122397e"
            ]
        ]
    },
    {
        "id": "94514e5dd76e1b4a",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": "Check ID",
        "func": "msg.realdata = msg.payload;\nvar networkid = msg.payload.substring(0,2);\nvar devid = msg.payload.substring(2,4);\nvar typeid = msg.payload.substring(4,6);\nmsg.topic = \"SELECT * from `devicelist` WHERE \";\nmsg.topic += \"`networkid` = '\"+networkid+\"' AND \";\nmsg.topic += \"`devid` = '\" + devid +\"' AND \";\nmsg.topic += \"`typeid` = '\" + typeid +\"';\";\nmsg.networkid = msg.realdata.substring(0,2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 240,
        "wires": [
            [
                "92b7c675366c9d8d"
            ]
        ]
    },
    {
        "id": "f20849a9ab1503b2",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": "Query",
        "func": "var d = msg.deviceinfo;\nmsg.topic = \"UPDATE `monitoringdata` SET \";\nif(d.keterangan.split(\",\")[0] == \"Temp/RH\"){\n    if(d.keterangan.split(\",\")[1] == \"CathLab\"){\n        msg.topic += \"`Temp_Cathlab` = \"+String(msg.payload.temperature_1)+\",\";\n        msg.topic += \"`RH_Cathlab` = \"+String(msg.payload.relative_humidity_1)+\";\";\n        flow.set(\"Temp_Cathlab\",[msg.payload.temperature_1,Date.now()]);\n        flow.set(\"RH_Cathlab\", [msg.payload.relative_humidity_1,Date.now()]);\n    } else if (d.keterangan.split(\",\")[1] == \"Machine\"){\n        msg.topic += \"`Temp_Machine` = \" + String(msg.payload.temperature_1) + \",\";\n        msg.topic += \"`RH_Machine` = \" + String(msg.payload.relative_humidity_1) + \";\";\n        flow.set(\"Temp_Machine\", [msg.payload.temperature_1,Date.now()]);\n        flow.set(\"RH_Machine\", [msg.payload.relative_humidity_1,Date.now()]);\n    }\n} else if (d.keterangan.split(\",\")[0] == \"Pressure\"){\n    if (d.keterangan.split(\",\")[1] == \"MediumFilter\") {\n        msg.topic += \"`Pre_Filter` = \" + String(msg.payload.barometric_pressure_1) + \";\";\n        flow.set(\"Pre_Filter\", [msg.payload.barometric_pressure_1,Date.now()]);\n    } else if (d.keterangan.split(\",\")[1] == \"HepaFilter\") {\n        msg.topic += \"`HEPA_Filter` = \" + String(msg.payload.barometric_pressure_1) + \";\";\n        flow.set(\"HEPA_Filter\", [msg.payload.barometric_pressure_1,Date.now()]);\n    }\n}\n\nmsg.topic += \"INSERT INTO `recorddevice`(`epoch`, `networkid`, `devid`, `typeid`, `temp`, `val`) VALUES (\";\nmsg.topic += String(msg.payload.epoch)+\",\";\nmsg.topic += \"'\" + String(msg.payload.networkid) + \"',\";\nmsg.topic += \"'\" + String(msg.payload.devid) + \"',\";\nmsg.topic += \"'\" + String(msg.payload.typeid) + \"',\";\nmsg.topic += String(msg.payload.temperature_1) + \",\";\nif(msg.payload.networkid == \"02\"){\n    msg.topic += String(msg.payload.barometric_pressure_1);\n}else if(msg.payload.networkid == \"03\"){\n    msg.topic += String(msg.payload.relative_humidity_1);\n}\nmsg.topic += \");\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 220,
        "wires": [
            [
                "a647954ae4d429aa"
            ]
        ]
    },
    {
        "id": "a647954ae4d429aa",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "2b3434178f0ac999",
            "9b0d96a526b14c55",
            "cf128b17d11f7fc7"
        ],
        "x": 1175,
        "y": 220,
        "wires": []
    },
    {
        "id": "2b3434178f0ac999",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "aadd16a462e83be5",
        "name": "link in 2",
        "links": [
            "a647954ae4d429aa",
            "f653f7df10385059",
            "4c17409ddbc782a5",
            "3fae4a69287e8867",
            "983c5238c51828dc",
            "09187eb453511326"
        ],
        "x": 525,
        "y": 60,
        "wires": [
            [
                "ed77b13627de379d"
            ]
        ]
    },
    {
        "id": "dd1e1bf4fa001f32",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "cbbdeba1125ca19b",
        "name": "OutData",
        "links": [
            "022a029521e3c1dd",
            "300675ed5fd9466c",
            "31d2b08316816f13",
            "618781567775cb33",
            "95c264c90bd714f9",
            "af5fad60c2799c88",
            "b7a0b469689fefd3",
            "bf104e7cca1d96a0",
            "d1bcd9574d203e14",
            "de5cfc72b0d10bf3",
            "fcded8e6800db872",
            "fe15437ea5ba0d90",
            "780771ba20b86bbe",
            "f9f4bd8039c3fbc8",
            "b5539273c8b7b27c",
            "d6ec50e49909a835",
            "6c8877aeb5ae2bf4",
            "f5e931f2c8849151",
            "d4819d014b224568",
            "f52c4ff255db8a17"
        ],
        "x": 275,
        "y": 60,
        "wires": [
            [
                "1ec9c25db1122edf",
                "31ef301a128c4b66"
            ]
        ]
    },
    {
        "id": "92b7c675366c9d8d",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 290,
        "y": 240,
        "wires": [
            [
                "f41842a72cb70323"
            ]
        ]
    },
    {
        "id": "4958a8f1dc7bf670",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "g": "1cbfcd06637d48ad",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1230,
        "y": 80,
        "wires": [
            [
                "a421582f2823dadb",
                "5df25e4c89a32048"
            ]
        ]
    },
    {
        "id": "a421582f2823dadb",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "1cbfcd06637d48ad",
        "name": "Init Global Variable",
        "func": "var json = {};\nflow.set(\"InitTime\",Date.now());\nflow.set(\"RelayInput\",msg.payload[1]);\nflow.set(\"RelayOutput\",msg.payload[2]);\nflow.set(\"RelayInputIndoor\",msg.payload[3]);\nflow.set(\"RelayOutputIndoor\",msg.payload[4]);\nflow.set(\"SensorQty\",msg.payload[5]);\nfor (let index = 0; index < Object.keys(msg.payload[0][0]).length ; index++) {\n    flow.set(Object.keys(msg.payload[0][0])[index],msg.payload[0][0][Object.keys(msg.payload[0][0])[index]]) \n    json[String(Object.keys(msg.payload[0][0])[index])] = flow.get(Object.keys(msg.payload[0][0])[index]);  \n}\njson[\"Timestamp\"] = toEpochTimeInSeconds(json.Timestamp);\nmsg.payload = [json,msg.payload[1],msg.payload[2]];\nreturn msg;\n\nfunction toEpochTimeInSeconds(dateString) {\n    return Math.floor(new Date(dateString).getTime());\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 60,
        "wires": [
            [
                "62a153d4d974c23e"
            ]
        ]
    },
    {
        "id": "62a153d4d974c23e",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "1cbfcd06637d48ad",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1570,
        "y": 60,
        "wires": []
    },
    {
        "id": "f653f7df10385059",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "2b3434178f0ac999",
            "9b0d96a526b14c55",
            "cf128b17d11f7fc7"
        ],
        "x": 795,
        "y": 260,
        "wires": []
    },
    {
        "id": "cc64b14b4d983e3f",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "g": "7ff6db086b81b7e7",
        "name": " ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "fa3bcb095fdfb9a7"
            ]
        ]
    },
    {
        "id": "fa3bcb095fdfb9a7",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "7ff6db086b81b7e7",
        "name": " Check",
        "func": "var RelayInput = flow.get(\"RelayInput\");\nvar RelayInputIndoor = flow.get(\"RelayInputIndoor\");\nvar RelayOutput = flow.get(\"RelayOutput\");\nvar RelayOutputIndoor = flow.get(\"RelayOutputIndoor\");\nvar RunningTime = secondsToHumanReadable(Math.round((Date.now()-flow.get(\"InitTime\"))/1000));\nfor (let index = 0; index < RelayInputIndoor.length; index++) {\n    if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && RelayInputIndoor[index].Stat == 1){\n        msg[\"StatusIndoor\"] = true;\n    }else if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && RelayInputIndoor[index].Stat == 0){\n        msg[\"StatusIndoor\"] = false;\n    }\n    if(RelayInputIndoor[index].keterangan == \"StatusOutdoor\" && RelayInputIndoor[index].Stat == 1){\n        msg[\"StatusOutdoor\"] = true;\n    }else if(RelayInputIndoor[index].keterangan == \"StatusOutdoor\" && RelayInputIndoor[index].Stat == 0){\n        msg[\"StatusOutdoor\"] = false;\n    }\n}\nfor (let index = 0; index < RelayInput.length; index++) {\n    if (RelayInput[index].keterangan == \"BoosterFan\" && RelayInput[index].Stat == 1){\n        msg[\"BoosterFan\"] = true;\n    } else if (RelayInput[index].keterangan == \"BoosterFan\" && RelayInput[index].Stat == 0){\n        msg[\"BoosterFan\"] = false;\n    }\n    if (RelayInput[index].keterangan == \"EF\" && RelayInput[index].Stat == 1){\n        msg[\"EF\"] = true;\n    } else if (RelayInput[index].keterangan == \"EF\" && RelayInput[index].Stat == 0){\n        msg[\"EF\"] = false;\n    }\n}\nif(msg.StatusIndoor && msg.StatusOutdoor && msg.BoosterFan && msg.EF){\n        msg[\"StartLoops\"] = true;\n        msg.payload = \"O-RUN-O(\"+String(RunningTime)+\")\";\n        return msg;\n    }else{  \n        msg[\"StartLoops\"] = false;\n        flow.set(\"cmdauto\",\"None\");\n    }\nmsg.payload = \"-IDLE- (\"+String(RunningTime)+\")\";\nmsg.SystemStatus = flow.get(\"SystemStatus\");\nreturn msg;\n\nfunction secondsToHumanReadable(seconds) {\n    const units = [\n        { label: 'year', value: 60 * 60 * 24 * 365 },  // Approximate, not accounting for leap years\n        { label: 'month', value: 60 * 60 * 24 * 30 },  // Approximate\n        { label: 'day', value: 60 * 60 * 24 },\n        { label: 'hour', value: 60 * 60 },\n        { label: 'minute', value: 60 },\n        { label: 'second', value: 1 }\n    ];\n\n    const result = [];\n\n    for (const unit of units) {\n        const unitValue = Math.floor(seconds / unit.value);\n        if (unitValue > 0) {\n            result.push(`${unitValue} ${unit.label}${unitValue > 1 ? 's' : ''}`);\n            seconds -= unitValue * unit.value;\n        }\n    }\n\n    return result.length > 0 ? result.join(' ') : '0 seconds';\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 400,
        "wires": [
            [
                "ae03f26ebfda2cf1",
                "6b0dbecee3dd961c",
                "6345195148b114ad",
                "b07e4e6ebad074fb"
            ]
        ]
    },
    {
        "id": "6b0dbecee3dd961c",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "7ff6db086b81b7e7",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 370,
        "y": 580,
        "wires": []
    },
    {
        "id": "ae03f26ebfda2cf1",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "7ff6db086b81b7e7",
        "name": " ",
        "property": "StartLoops",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 400,
        "wires": [
            [
                "53ef936abb21b675"
            ],
            [
                "962ac3a3ae6cb677",
                "5a9616ba520d413a",
                "3b2a44cd4136616d"
            ]
        ]
    },
    {
        "id": "962ac3a3ae6cb677",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "7ff6db086b81b7e7",
        "name": " ",
        "func": "msg.reset = true;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 400,
        "wires": [
            [
                "e824b89db0dcadfc"
            ]
        ]
    },
    {
        "id": "e824b89db0dcadfc",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "7ff6db086b81b7e7",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "5c0e450f5d574f30"
        ],
        "x": 575,
        "y": 400,
        "wires": []
    },
    {
        "id": "5c0e450f5d574f30",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "7ff6db086b81b7e7",
        "name": "link in 4",
        "links": [
            "e824b89db0dcadfc"
        ],
        "x": 405,
        "y": 360,
        "wires": [
            [
                "53ef936abb21b675"
            ]
        ]
    },
    {
        "id": "c3f008a339c97a2e",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "7ff6db086b81b7e7",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "98d4b79922df7538",
            "c819c802fe0e6284"
        ],
        "x": 715,
        "y": 360,
        "wires": []
    },
    {
        "id": "98d4b79922df7538",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "94afd02c3878fc20",
        "name": "link in 5",
        "links": [
            "c3f008a339c97a2e"
        ],
        "x": 75,
        "y": 760,
        "wires": [
            [
                "5dfb8dd8c390d971"
            ]
        ]
    },
    {
        "id": "5dfb8dd8c390d971",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "94afd02c3878fc20",
        "name": " ",
        "func": "msg.cmd = flow.get(\"cmdauto\");\nvar BatasAtasRH = 58;\nvar BatasBawahRH = 52;\nvar RelayInput = flow.get(\"RelayInput\");\nvar RelayOutput = flow.get(\"RelayOutput\");\n//----------------------------------------------------\n// Definisikan parameter PID\nvar Kp = 0.5; // Gain proporsional\nvar Ki = 0.2; // Gain integral\nvar Kd = 0.1; // Gain derivatif\nvar SetPoint = 50;\n\nvar errorPrev = 0;\nvar integral = 0;\n//----------------------------------------------------\nif(flow.get(\"SystemStatus\") == \"OFF\" && msg.cmd != \"None\"){\n    msg.cmd = \"Shutdown\";\n}\nif(msg.cmd == \"Init\"){\n    msg.cmd = \"MonitorTemp\";\n}else if(msg.cmd == \"MonitorTemp\"){\n    if ((Date.now() - flow.get(\"Temp_Cathlab\")[1]) / 1000 < 10 && (Date.now() - flow.get(\"RH_Cathlab\")[1])/1000<10){\n        var RH_Cathlab = flow.get(\"RH_Cathlab\")[0];\n        \n        if (RH_Cathlab >= (SetPoint + 1)) {\n            var dur = kontrolPID(SetPoint,RH_Cathlab)*(-1)*60*1000;\n            if(dur<0){\n                return msg;\n            }\n            flow.set(\"DurationEH\",[Math.round(dur),Date.now()]);\n            msg.cmd = \"OnEH\"+\" =[EH1]\";\n            console.log(String(dur));\n        }\n    }\n}else if(msg.cmd == \"OnEH\"+\" =[EH1]\"){\n    for (let index = 0; index < RelayOutput.length; index++) {\n        if(RelayOutput[index].keterangan == \"EH1\" && RelayOutput[index].Stat == 1){\n            msg.cmd = \"Waiting\";\n            msg.delay = flow.get(\"DurationEH\")[0];\n        }\n    }\n} else if (msg.cmd == \"Waiting Force Done\"){\n\n    msg.cmd = \"OffEH\";\n} else if(msg.cmd.substring(0,7) == \"Waiting\"){\n    var timeRemaining = Math.round(((flow.get(\"DurationEH\")[0]+flow.get(\"DurationEH\")[1])-Date.now())/1000);\n    msg.cmd = \"Waiting = \"+String(epochtostr(timeRemaining));\n    \n    var RH_Cathlab = flow.get(\"RH_Cathlab\")[0];\n    if (RH_Cathlab < (SetPoint+1)){\n        msg.cmd = \"Waiting Force Done\";\n        msg.reset = true;\n    }\n    console.log(\"Timeremaining : \"+String(timeRemaining));\n    console.log(\"DurationEH : \"+String((Math.round((flow.get(\"DurationEH\")[0])/1000)/2)));\n    if(timeRemaining <= (Math.round((flow.get(\"DurationEH\")[0])/1000)/2)){\n        for (let index = 0; index < RelayOutput.length; index++) {\n            if(RelayOutput[index].keterangan == \"EH2\" && RelayOutput[index].Stat == 0){\n                msg.cmd += \" =[EH2]\";\n            }\n        }\n    }\n} else if(msg.cmd == \"Timeout\"){\n    var RH_Cathlab = flow.get(\"RH_Cathlab\")[0];\n    msg.cmd = \"OffEH\";\n} else if(msg.cmd == \"OffEH\"){\n    msg.statusEH1 = false;\n    msg.statusEH2 = false;\n    for (let index = 0; index < RelayOutput.length; index++) {\n        if(RelayOutput[index].keterangan == \"EH1\" && RelayOutput[index].Stat == 0){\n            msg.statusEH1 = true;\n        }else if(RelayOutput[index].keterangan == \"EH2\" && RelayOutput[index].Stat == 0){\n            msg.statusEH2 = true;\n        }\n    }\n    if(msg.statusEH1&&msg.statusEH2){\n        msg.cmd = \"MonitorTemp\";\n    }\n}\nflow.set(\"cmdauto\", msg.cmd);\nreturn msg;\n\nfunction kontrolPID(nilaiTarget, nilaiSekarang) {\n    // Hitung error saat ini\n    const error = nilaiTarget - nilaiSekarang;\n\n    // Hitung komponen PID\n    const proporsional = Kp * error;\n    integral += error;\n    const integralComp = Ki * integral;\n    const derivative = Kd * (error - errorPrev);\n\n    // Hitung output PID\n    const output = proporsional + integralComp + derivative;\n\n    // Simpan error saat ini untuk penggunaan di iterasi selanjutnya\n    errorPrev = error;\n\n    return output;\n}\nfunction epochtostr(seconds) {\n    const units = [\n        { label: 'year', value: 60 * 60 * 24 * 365 },  // Approximate, not accounting for leap years\n        { label: 'month', value: 60 * 60 * 24 * 30 },  // Approximate\n        { label: 'day', value: 60 * 60 * 24 },\n        { label: 'hour', value: 60 * 60 },\n        { label: 'minute', value: 60 },\n        { label: 'second', value: 1 }\n    ];\n\n    const result = [];\n\n    for (const unit of units) {\n        const unitValue = Math.floor(seconds / unit.value);\n        if (unitValue > 0) {\n            result.push(`${unitValue} ${unit.label}${unitValue > 1 ? 's' : ''}`);\n            seconds -= unitValue * unit.value;\n        }\n    }\n\n    return result.length > 0 ? result.join(' ') : '0 seconds';\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 760,
        "wires": [
            [
                "6c88cbac6c1e1314",
                "f76630c041b6c74a"
            ]
        ]
    },
    {
        "id": "996b8741f6785be0",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "94afd02c3878fc20",
        "name": "link in 6",
        "links": [
            "340b6dc447cb3a1f"
        ],
        "x": 125,
        "y": 720,
        "wires": [
            [
                "5dfb8dd8c390d971"
            ]
        ]
    },
    {
        "id": "6c88cbac6c1e1314",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "94afd02c3878fc20",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "26120895f3f84739",
            "034e761815e481f6"
        ],
        "x": 315,
        "y": 820,
        "wires": []
    },
    {
        "id": "26120895f3f84739",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "94afd02c3878fc20",
        "name": "link in 7",
        "links": [
            "6c88cbac6c1e1314"
        ],
        "x": 105,
        "y": 680,
        "wires": [
            [
                "32dded3e3ceacf4c"
            ]
        ]
    },
    {
        "id": "340b6dc447cb3a1f",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "94afd02c3878fc20",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "996b8741f6785be0"
        ],
        "x": 395,
        "y": 680,
        "wires": []
    },
    {
        "id": "811d40e949e9fef1",
        "type": "delay",
        "z": "bca4771a12cb11e6",
        "g": "94afd02c3878fc20",
        "name": " ",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 310,
        "y": 680,
        "wires": [
            [
                "340b6dc447cb3a1f"
            ]
        ]
    },
    {
        "id": "c7d1752efe372b78",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "g": "94afd02c3878fc20",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 350,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "14f91a50d6904e88",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "b2cfefbaa250692d",
        "name": "Request Temp",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'Temp/RH,CathLab';\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 580,
        "wires": [
            [
                "b1b2db7babdaf54b"
            ]
        ]
    },
    {
        "id": "f76630c041b6c74a",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "94afd02c3878fc20",
        "name": " ",
        "property": "cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "MonitorTemp",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "=[EH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Waiting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OffEH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Shutdown",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 350,
        "y": 760,
        "wires": [
            [
                "d1d6d888207e0204"
            ],
            [
                "4d48619bf5bbadca"
            ],
            [
                "b1e9832db3a61f1b"
            ],
            [
                "c476e780880d1b2d"
            ],
            [
                "0a7ea2c4e927a1bd"
            ]
        ]
    },
    {
        "id": "8f99e09dae854b85",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "g": "b2cfefbaa250692d",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "15",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 890,
        "y": 580,
        "wires": [
            [
                "14f91a50d6904e88"
            ]
        ]
    },
    {
        "id": "b1b2db7babdaf54b",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "g": "b2cfefbaa250692d",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1190,
        "y": 580,
        "wires": [
            [
                "3ac72ba11294aa01"
            ]
        ]
    },
    {
        "id": "3ac72ba11294aa01",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "b2cfefbaa250692d",
        "name": "Requesting",
        "func": "var d = msg.payload[0];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"00\";\ncmd += \"00000000\";\nmsg.payload = cmd;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 580,
        "wires": [
            [
                "022a029521e3c1dd"
            ]
        ]
    },
    {
        "id": "b7a0b469689fefd3",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "6a72c936b627e910",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "dd1e1bf4fa001f32"
        ],
        "x": 1535,
        "y": 720,
        "wires": []
    },
    {
        "id": "eeaad9e4a7b40fec",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "7ff6db086b81b7e7",
        "name": " ",
        "func": "flow.set(\"cmdauto\",\"Init\");\nmsg.cmd = \"Init\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 360,
        "wires": [
            [
                "c3f008a339c97a2e"
            ]
        ]
    },
    {
        "id": "b07e4e6ebad074fb",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "7ff6db086b81b7e7",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "694bf36843b2868e",
            "738e22f45c2ce650"
        ],
        "x": 335,
        "y": 360,
        "wires": []
    },
    {
        "id": "694bf36843b2868e",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "73fe2eb92fbe359c",
        "name": "link in 8",
        "links": [
            "b07e4e6ebad074fb"
        ],
        "x": 1205,
        "y": 1500,
        "wires": [
            [
                "40a624a1f8f16c78",
                "0394ccbdad96488f"
            ]
        ]
    },
    {
        "id": "40a624a1f8f16c78",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "73fe2eb92fbe359c",
        "name": " ",
        "func": "var d = [];\nd.push(flow.get(\"Temp_Cathlab\"));\nd.push(flow.get(\"RH_Cathlab\"));\nd.push(flow.get(\"Temp_Machine\"));\nd.push(flow.get(\"RH_Machine\"));\nd.push(flow.get(\"Pre_Filter\"));\nd.push(flow.get(\"HEPA_Filter\"));\nd.push(flow.get(\"DurationEH\"));\nd.push(flow.get(\"RelayInput\"));\nd.push(flow.get(\"RelayOutput\"));\nmsg.payload = d;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 1500,
        "wires": [
            [
                "d6aa40b162d6b292",
                "eaea2c3e22a96a9f",
                "a37180a17c8d6d8e",
                "510cccceaeed9bec",
                "7ea2e7c17a42eba4",
                "c4f972fcf9162c5b",
                "042300e6b0e72670",
                "12622275c3de0746"
            ]
        ]
    },
    {
        "id": "32dded3e3ceacf4c",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "94afd02c3878fc20",
        "name": " ",
        "property": "cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "None",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 190,
        "y": 680,
        "wires": [
            [
                "811d40e949e9fef1"
            ]
        ]
    },
    {
        "id": "53fcd0a658899b61",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "94afd02c3878fc20",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "cmd",
        "targetType": "msg",
        "statusVal": "cmd",
        "statusType": "auto",
        "x": 350,
        "y": 900,
        "wires": []
    },
    {
        "id": "0394ccbdad96488f",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "g": "73fe2eb92fbe359c",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1290,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "ede82a4075db7adf",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "g": "6a72c936b627e910",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "15",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 900,
        "y": 740,
        "wires": [
            [
                "db7e71f59821125d"
            ]
        ]
    },
    {
        "id": "db7e71f59821125d",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "6a72c936b627e910",
        "name": "Turn On EH",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayOutput';\";\nmsg.topic += \"SELECT * FROM `Output` WHERE `keterangan` = 'EH1' OR `keterangan` = 'EH2';\";\nmsg.topic += \"SELECT * FROM `Operation`;\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 740,
        "wires": [
            [
                "89f81b486a2b2f8d"
            ]
        ]
    },
    {
        "id": "89f81b486a2b2f8d",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "g": "6a72c936b627e910",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1190,
        "y": 740,
        "wires": [
            [
                "4776d2059a76e625"
            ]
        ]
    },
    {
        "id": "4776d2059a76e625",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "6a72c936b627e910",
        "name": " On1",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[2][0].Output));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[1][0].Number - 1] == \"0\" && msg.cmd.includes(\"=[EH1]\")) {\n    \n    spt[msg.payload[1][0].Number - 1] = \"1\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 0){\n        msg.statusEH1 = true;\n        \n    }else{\n        msg.statusEH1 = false;\n    }\n    \n    msg.payload[2][0][\"Output\"] = parseInt(String(msg.payload[2][0].Output)) + parseInt(String(msg.payload[1][0].Dec));\n    \n}\nif (binarycurrent[msg.payload[1][1].Number - 1] == \"0\" && msg.cmd.includes(\"=[EH2]\")){\n    msg.statusEH2 = true;\n}\n\nmsg.numberOutput = msg.payload[2][0].Output;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\" + \"000\" + String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 740,
        "wires": [
            [
                "e181d40ba2c883c6",
                "7ef3d8868618eb2f"
            ]
        ]
    },
    {
        "id": "d7f5d1cda8b9c2e4",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "efd67cff70aea370",
        "name": "Request Temp",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'Temp/RH,CathLab';\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1000,
        "wires": [
            [
                "86d93e43ac494bd0"
            ]
        ]
    },
    {
        "id": "86d93e43ac494bd0",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "g": "efd67cff70aea370",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 470,
        "y": 1000,
        "wires": [
            [
                "ab10a2b4ace98698"
            ]
        ]
    },
    {
        "id": "ab10a2b4ace98698",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "efd67cff70aea370",
        "name": "Requesting",
        "func": "var d = msg.payload[0];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"00\";\ncmd += \"00000000\";\nmsg.payload = cmd;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 1000,
        "wires": [
            [
                "fe15437ea5ba0d90"
            ]
        ]
    },
    {
        "id": "9f44d28a524d189a",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "efd67cff70aea370",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "74eb172db82ec21b"
        ],
        "x": 415,
        "y": 1040,
        "wires": []
    },
    {
        "id": "a88f76740bd895c4",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "efd67cff70aea370",
        "name": "Reset",
        "func": "msg.reset = true;\nmsg.cmd = \"Timeout\";\nflow.set(\"cmdauto\",msg.cmd);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1040,
        "wires": [
            [
                "9f44d28a524d189a"
            ]
        ]
    },
    {
        "id": "74eb172db82ec21b",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "efd67cff70aea370",
        "name": "link in 9",
        "links": [
            "9f44d28a524d189a"
        ],
        "x": 75,
        "y": 1000,
        "wires": [
            [
                "5325683f3d621a49"
            ]
        ]
    },
    {
        "id": "2815e1177e773fe4",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "cbbdeba1125ca19b",
        "name": "Receive",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 180,
        "y": 120,
        "wires": []
    },
    {
        "id": "dae22984db30bba3",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "g": "1aacce764e0ed47b",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "15",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 910,
        "y": 900,
        "wires": [
            [
                "1658ac7b84089f6b"
            ]
        ]
    },
    {
        "id": "1658ac7b84089f6b",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "1aacce764e0ed47b",
        "name": "Turn Off EH",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayOutput';\";\nmsg.topic += \"SELECT * FROM `Output` WHERE `keterangan` = 'EH1' OR `keterangan` = 'EH2';\";\nmsg.topic += \"SELECT * FROM `Operation`;\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 900,
        "wires": [
            [
                "0494c8d6085a4cf0"
            ]
        ]
    },
    {
        "id": "0494c8d6085a4cf0",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "g": "1aacce764e0ed47b",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1210,
        "y": 900,
        "wires": [
            [
                "01fea39265f2dc97"
            ]
        ]
    },
    {
        "id": "01fea39265f2dc97",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "1aacce764e0ed47b",
        "name": " Off1",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\nvar binarycurrent = reverseString(decToBinary(msg.payload[2][0].Output));\nvar spt = binarycurrent.split(\"\");\nif(binarycurrent[msg.payload[1][0].Number-1] == \"1\"){\n    spt[msg.payload[1][0].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 1){\n        msg.statusEH1 = true;\n    }else{\n        msg.statusEH1 = false;\n    }\n    msg.payload[2][0][\"Output\"] = parseInt(String(msg.payload[2][0].Output)) -  parseInt(String(msg.payload[1][0].Dec));\n}\nif(binarycurrent[msg.payload[1][1].Number-1] == \"1\"){\n    msg.statusEH2 = true;\n}\nmsg.numberOutput = msg.payload[2][0].Output;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 900,
        "wires": [
            [
                "710352610b5171f7",
                "44ece0d16efb9af2"
            ]
        ]
    },
    {
        "id": "e181d40ba2c883c6",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "6a72c936b627e910",
        "name": " ",
        "property": "statusEH1",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1440,
        "y": 720,
        "wires": [
            [
                "b7a0b469689fefd3"
            ]
        ]
    },
    {
        "id": "710352610b5171f7",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "1aacce764e0ed47b",
        "name": " ",
        "property": "statusEH1",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1450,
        "y": 880,
        "wires": [
            [
                "fcded8e6800db872"
            ]
        ]
    },
    {
        "id": "44ece0d16efb9af2",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "1aacce764e0ed47b",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1450,
        "y": 920,
        "wires": [
            [
                "d802d6a814ceb1d0"
            ]
        ]
    },
    {
        "id": "ddab33048d01b3d5",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "1aacce764e0ed47b",
        "name": " Off2",
        "func": "msg.payload = msg.resultsql;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\nvar binarycurrent = reverseString(decToBinary(msg.numberOutput));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[1][1].Number -1] == \"1\"){\n    \n    spt[msg.payload[1][1].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if (flow.get(\"RelayOutput\")[msg.payload[1][1].Number].Stat == 1){\n        msg.statusEH2 = true;\n    }else{\n        msg.statusEH2 = false;\n    }\n   msg[\"numberOutput\"] = parseInt(String(msg.numberOutput)) -  parseInt(String(msg.payload[1][1].Dec));\n}\n\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 920,
        "wires": [
            [
                "2ee5fb66a447ff24"
            ]
        ]
    },
    {
        "id": "d802d6a814ceb1d0",
        "type": "delay",
        "z": "bca4771a12cb11e6",
        "g": "1aacce764e0ed47b",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1600,
        "y": 920,
        "wires": [
            [
                "ddab33048d01b3d5"
            ]
        ]
    },
    {
        "id": "300675ed5fd9466c",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "1aacce764e0ed47b",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "dd1e1bf4fa001f32"
        ],
        "x": 1935,
        "y": 920,
        "wires": []
    },
    {
        "id": "022a029521e3c1dd",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "b2cfefbaa250692d",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "dd1e1bf4fa001f32"
        ],
        "x": 1435,
        "y": 580,
        "wires": []
    },
    {
        "id": "fe15437ea5ba0d90",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "efd67cff70aea370",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "dd1e1bf4fa001f32"
        ],
        "x": 715,
        "y": 1000,
        "wires": []
    },
    {
        "id": "fcded8e6800db872",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "1aacce764e0ed47b",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "dd1e1bf4fa001f32"
        ],
        "x": 1555,
        "y": 880,
        "wires": []
    },
    {
        "id": "9d6f10db5c0fea06",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "aadd16a462e83be5",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "topic.split(\" \")[0]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 610,
        "y": 120,
        "wires": []
    },
    {
        "id": "2ee5fb66a447ff24",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "1aacce764e0ed47b",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1850,
        "y": 920,
        "wires": [
            [
                "300675ed5fd9466c"
            ]
        ]
    },
    {
        "id": "7ef3d8868618eb2f",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "6a72c936b627e910",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1440,
        "y": 760,
        "wires": [
            [
                "8099edeb0376bcea"
            ]
        ]
    },
    {
        "id": "8099edeb0376bcea",
        "type": "delay",
        "z": "bca4771a12cb11e6",
        "g": "6a72c936b627e910",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1580,
        "y": 760,
        "wires": [
            [
                "efd4c15eee3524d0"
            ]
        ]
    },
    {
        "id": "efd4c15eee3524d0",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "6a72c936b627e910",
        "name": "On2",
        "func": "msg.payload = msg.resultsql;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.numberOutput));\nvar spt = binarycurrent.split(\"\");\nif(binarycurrent[msg.payload[1][1].Number-1] == \"0\"){\n    \n    spt[msg.payload[1][1].Number - 1] = \"1\";\n    binarycurrent = spt.join(\"\");\n    if (flow.get(\"RelayOutput\")[msg.payload[1][1].Number].Stat == 0){\n        msg.statusEH2 = true;\n    }else{\n        msg.statusEH2 = false;\n    }\n   msg[\"numberOutput\"] = parseInt(String(msg.numberOutput)) +  parseInt(String(msg.payload[1][1].Dec));\n}\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 760,
        "wires": [
            [
                "99d7acf34720e090"
            ]
        ]
    },
    {
        "id": "99d7acf34720e090",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "6a72c936b627e910",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1830,
        "y": 760,
        "wires": [
            [
                "bf104e7cca1d96a0"
            ]
        ]
    },
    {
        "id": "bf104e7cca1d96a0",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "6a72c936b627e910",
        "name": "link out 16",
        "mode": "link",
        "links": [
            "dd1e1bf4fa001f32"
        ],
        "x": 1915,
        "y": 760,
        "wires": []
    },
    {
        "id": "31ef301a128c4b66",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "cbbdeba1125ca19b",
        "name": "CMD",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 120,
        "wires": []
    },
    {
        "id": "d6aa40b162d6b292",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "73fe2eb92fbe359c",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "fdb500481cbf7d01",
            "7f8325ca8f5e07a8"
        ],
        "x": 1435,
        "y": 1340,
        "wires": []
    },
    {
        "id": "fdb500481cbf7d01",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "d30f8d72cc7e3f14",
        "name": "link in 10",
        "links": [
            "d6aa40b162d6b292"
        ],
        "x": 1685,
        "y": 1400,
        "wires": [
            [
                "7a293eedb6b117a7",
                "06fb4a2bad3b8364",
                "131878eb934f5207",
                "0527f01b52cc60a2"
            ]
        ]
    },
    {
        "id": "7a293eedb6b117a7",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "d30f8d72cc7e3f14",
        "name": "EH1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[8][1].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1790,
        "y": 1340,
        "wires": []
    },
    {
        "id": "06fb4a2bad3b8364",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "d30f8d72cc7e3f14",
        "name": "EH2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[8][2].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1790,
        "y": 1380,
        "wires": []
    },
    {
        "id": "aa65a38826eefec0",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "g": "efd67cff70aea370",
        "name": "Waiting",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "overrideDelay": true,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 180,
        "y": 1040,
        "wires": [
            [
                "a88f76740bd895c4"
            ]
        ]
    },
    {
        "id": "5325683f3d621a49",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "g": "efd67cff70aea370",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "-15",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 170,
        "y": 1000,
        "wires": [
            [
                "d7f5d1cda8b9c2e4"
            ]
        ]
    },
    {
        "id": "53ef936abb21b675",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "g": "7ff6db086b81b7e7",
        "name": " ",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 490,
        "y": 360,
        "wires": [
            [
                "eeaad9e4a7b40fec"
            ]
        ]
    },
    {
        "id": "eaea2c3e22a96a9f",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "73fe2eb92fbe359c",
        "name": " TempCathLab",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1500,
        "y": 1380,
        "wires": []
    },
    {
        "id": "a37180a17c8d6d8e",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "73fe2eb92fbe359c",
        "name": "RHCathLab",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[1]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1490,
        "y": 1420,
        "wires": []
    },
    {
        "id": "510cccceaeed9bec",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "73fe2eb92fbe359c",
        "name": " TempMachine",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[2]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1500,
        "y": 1460,
        "wires": []
    },
    {
        "id": "7ea2e7c17a42eba4",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "73fe2eb92fbe359c",
        "name": "RHMachine",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[3]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1490,
        "y": 1500,
        "wires": []
    },
    {
        "id": "c4f972fcf9162c5b",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "73fe2eb92fbe359c",
        "name": " Pre_Filter",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[4]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1480,
        "y": 1540,
        "wires": []
    },
    {
        "id": "042300e6b0e72670",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "73fe2eb92fbe359c",
        "name": " HEPA_Filter",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[5]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1490,
        "y": 1580,
        "wires": []
    },
    {
        "id": "12622275c3de0746",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "73fe2eb92fbe359c",
        "name": "DurationEH",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[6]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1490,
        "y": 1620,
        "wires": []
    },
    {
        "id": "705a03382e48fbaa",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "g": "9a2233b4c5e85c0f",
        "name": " ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 870,
        "y": 1340,
        "wires": [
            [
                "1f8f8dcba5857b3f"
            ]
        ]
    },
    {
        "id": "efe1a2d2448d86c1",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "9a2233b4c5e85c0f",
        "name": "2 Bit",
        "func": "var arr = [];\narr.push(\"04030100000000\"); // 0000 0000\narr.push(\"04030100000002\"); // 0100 0000\narr.push(\"0403010000000A\"); // 0101 0000\narr.push(\"0403010000002A\"); // 0101 0100\narr.push(\"040301000000AA\"); // 0101 0101\narr.push(\"040301000000A8\"); // 0001 0101\narr.push(\"040301000000A0\"); // 0000 0101\narr.push(\"04030100000080\"); // 0000 0001\narr.push(\"04030100000000\"); // 0000 0000\nmsg.payload = arr;\nmsg[\"delay\"] = 10000;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1420,
        "wires": [
            [
                "3c0def953a7880c0"
            ]
        ]
    },
    {
        "id": "13ed67235efcb4e7",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "9a2233b4c5e85c0f",
        "name": "1 Bit",
        "func": "var arr = [];\narr.push(\"04030100000000\"); // 0000 \narr.push(\"04030100000001\"); // 1000 \narr.push(\"04030100000003\"); // 1100 \narr.push(\"04030100000007\"); // 1110 \narr.push(\"0403010000000F\"); // 1111 \narr.push(\"04030100000007\"); // 0111 \narr.push(\"04030100000003\"); // 0011 \narr.push(\"04030100000001\"); // 0001 \narr.push(\"04030100000000\"); // 0000 \nmsg.payload = arr;\nmsg[\"delay\"] = 10000;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 1460,
        "wires": [
            [
                "3c0def953a7880c0"
            ]
        ]
    },
    {
        "id": "9ecba9cebe6176a2",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "g": "9a2233b4c5e85c0f",
        "name": " ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 870,
        "y": 1380,
        "wires": [
            [
                "d072fc3ec94d6a47"
            ]
        ]
    },
    {
        "id": "131878eb934f5207",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "d30f8d72cc7e3f14",
        "name": "Booster",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[8][3].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1800,
        "y": 1420,
        "wires": []
    },
    {
        "id": "0527f01b52cc60a2",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "d30f8d72cc7e3f14",
        "name": "EF",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[8][4].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1790,
        "y": 1460,
        "wires": []
    },
    {
        "id": "7f8325ca8f5e07a8",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "02835126ba65ad94",
        "name": "link in 11",
        "links": [
            "d6aa40b162d6b292"
        ],
        "x": 1965,
        "y": 1400,
        "wires": [
            [
                "55557f20a1962080",
                "c361579d7bcf203c",
                "4b9e8cdbb6bea80b",
                "caea8b0f760c7213"
            ]
        ]
    },
    {
        "id": "55557f20a1962080",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "02835126ba65ad94",
        "name": "EH1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[7][4].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2070,
        "y": 1340,
        "wires": []
    },
    {
        "id": "c361579d7bcf203c",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "02835126ba65ad94",
        "name": "EH2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[7][5].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2070,
        "y": 1380,
        "wires": []
    },
    {
        "id": "4b9e8cdbb6bea80b",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "02835126ba65ad94",
        "name": "Booster",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[7][6].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2080,
        "y": 1420,
        "wires": []
    },
    {
        "id": "caea8b0f760c7213",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "02835126ba65ad94",
        "name": "EF",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[7][8].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 2070,
        "y": 1460,
        "wires": []
    },
    {
        "id": "3c0def953a7880c0",
        "type": "subflow:e9b71a55.b25c68",
        "z": "bca4771a12cb11e6",
        "g": "9a2233b4c5e85c0f",
        "name": "",
        "x": 1010,
        "y": 1440,
        "wires": [
            [
                "f5e931f2c8849151"
            ],
            []
        ]
    },
    {
        "id": "fb1bf2e163b3c7a9",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": " Relay",
        "func": "msg.deviceinfo = msg.payload[0];\nmsg.topic = \"\";\nif(msg.deviceinfo.keterangan == \"RelayIndoor\"){\n    var RelayInputIndoor = flow.get(\"RelayInputIndoor\");\n    msg.deviceinfo[\"InputIndoorVal\"] = reverseString(hexToBinary(msg.realdata.substring(8,10)));\n    console.log(\"Hex : \" + String((msg.realdata.substring(8, 10))));\n    console.log(\"InputIndoorVal : \" + String(msg.deviceinfo.InputIndoorVal));\n    if(msg.deviceinfo.InputIndoorVal == \"11000000\"){\n        RelayInputIndoor[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayInputIndoor.length; index++) {\n            RelayInputIndoor[index][\"Stat\"] = 0;\n        }\n        msg.topic += \"UPDATE `InputIndoor` SET `Stat` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 0;\";\n    }else{\n        RelayInputIndoor[0][\"Stat\"] = 0;\n        var spt = msg.deviceinfo.InputIndoorVal.split(\"\");\n        console.log(spt);\n        for (let index = 1; index < spt.length+1; index++) {\n            if(spt[index-1] == \"0\"){\n                if(index==1){\n                    msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 1;\";\n                }else if(index == 2){\n                    msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 1;\";\n                }\n                msg.topic += \"UPDATE `InputIndoor` SET `Stat` = 1 WHERE `Number` = \"+String(index)+\";\";          \n                RelayInputIndoor[index][\"Stat\"] = 1;\n            }else if(spt[index-1] == \"1\"){\n                // console.log(\"Element :\"+String(spt[index-1]));\n                // console.log(\"Index : \"+String(index-1));\n                if(index==1){\n                    msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 0;\";\n                }else if(index == 2){\n                    msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;\";\n                }\n                msg.topic += \"UPDATE `InputIndoor` SET `Stat` = 0 WHERE `Number` = \"+String(index)+\";\";             \n                RelayInputIndoor[index][\"Stat\"] = 0;         \n            }\n        }\n    }\n    flow.set(\"RelayInputIndoor\", RelayInputIndoor);\n\n    var RelayOutputIndoor = flow.get(\"RelayOutputIndoor\");\n    msg.deviceinfo[\"OutputIndoorVal\"] = reverseString(hexToBinary2((msg.realdata.substring(10, 12))));\n    if (msg.deviceinfo.OutputIndoorVal == \"00000000\") {\n        RelayOutputIndoor[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayOutputIndoor.length; index++) {\n            RelayOutputIndoor[index][\"Stat\"] = 0;\n        }\n        msg.topic += \"UPDATE `OutputIndoor` SET `Stat` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 0;\";\n    } else {\n        RelayOutputIndoor[0][\"Stat\"] = 0;\n        var spt = msg.deviceinfo.OutputIndoorVal.split(\"\");\n        for (let index = 1; index < spt.length + 1; index++) {\n            if (spt[index - 1] == \"0\") {\n                if(index==1){\n                    msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 0;\";\n                }else if(index == 2){\n                    msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 0;\";\n                }\n                msg.topic += \"UPDATE `OutputIndoor` SET `Stat` = 0 WHERE `Number` = \" + String(index) + \";\";\n                RelayOutputIndoor[index][\"Stat\"] = 0;\n            } else if (spt[index - 1] == \"1\") {\n                if(index==1){\n                    msg.topic += \"UPDATE `monitoringdata` SET `AHU_Status` = 1;\";\n                }else if(index == 2){\n                    msg.topic += \"UPDATE `monitoringdata` SET `Outdoor_Unit` = 1;\";\n                }\n                msg.topic += \"UPDATE `OutputIndoor` SET `Stat` = 1 WHERE `Number` = \" + String(index) + \";\";\n                RelayOutputIndoor[index][\"Stat\"] = 1;\n            }\n        }\n    }\n    flow.set(\"RelayOutputIndoor\", RelayOutputIndoor);\n    msg.topic += \"UPDATE `Operation` SET `OutputIndoor` = \" + String(parseInt(msg.realdata.substring(10, 12), 16)) + \";\";\n        \n}else{\n    var RelayInput = flow.get(\"RelayInput\");\n    msg.deviceinfo[\"InputVal\"] = reverseString(hexToBinary(msg.realdata.substring(8, 10)));\n    console.log(\"Hex : \" + String((msg.realdata.substring(8, 10))));\n    console.log(\"InputVal : \" + String(msg.deviceinfo.InputVal));\n    if (msg.deviceinfo.InputVal == \"11111111\") {\n        RelayInput[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayInput.length; index++) {\n            RelayInput[index][\"Stat\"] = 0;\n        }\n        msg.topic += \"UPDATE `Input` SET `Stat` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 0;\";\n        msg.topic += \"UPDATE `information` SET `AutoManual` = '1' WHERE `information`.`ID` = 1;\";\n    } else {\n        RelayInput[0][\"Stat\"] = 0;\n        var spt = msg.deviceinfo.InputVal.split(\"\");\n        console.log(spt);\n        for (let index = 1; index < spt.length + 1; index++) {\n            if (spt[index - 1] == \"0\") {\n                console.log(\"Element :\" + String(spt[index - 1]));\n                console.log(\"Index : \" + String(index - 1));\n                if (index == 3) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 1;\";\n                } else if (index == 4) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 1;\";\n                } else if (index == 5) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 1;\";\n                } else if (index == 7) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 1;\";\n                }\n                msg.topic += \"UPDATE `Input` SET `Stat` = 1 WHERE `Number` = \" + String(index) + \";\";\n                if(index == 1){\n                    msg.topic += \"UPDATE `information` SET `AutoManual` = '0' WHERE `information`.`ID` = 1;\";\n                }\n                RelayInput[index][\"Stat\"] = 1;\n            } else if (spt[index - 1] == \"1\") {\n                // console.log(\"Element :\"+String(spt[index-1]));\n                // console.log(\"Index : \"+String(index-1));\n                if (index == 3) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 0;\";\n                } else if (index == 4) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 0;\";\n                } else if (index == 5) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 0;\";\n                } else if (index == 7) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 0;\";\n                }\n                msg.topic += \"UPDATE `Input` SET `Stat` = 0 WHERE `Number` = \" + String(index) + \";\";\n                if(index == 1){\n                    msg.topic += \"UPDATE `information` SET `AutoManual` = '1' WHERE `information`.`ID` = 1;\";\n                }\n                RelayInput[index][\"Stat\"] = 0;\n            }\n        }\n    }\n    flow.set(\"RelayInput\", RelayInput);\n    var RelayOutput = flow.get(\"RelayOutput\");\n    msg.deviceinfo[\"OutputVal\"] = reverseString(hexToBinary2((msg.realdata.substring(10, 12))));\n    if (msg.deviceinfo.OutputVal == \"00000000\") {\n        RelayOutput[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayOutput.length; index++) {\n            RelayOutput[index][\"Stat\"] = 0;\n        }\n        msg.topic += \"UPDATE `Output` SET `Stat` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 0;\";\n        msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 0;\";\n    } else {\n        RelayOutput[0][\"Stat\"] = 0;\n        var spt = msg.deviceinfo.OutputVal.split(\"\");\n        for (let index = 1; index < spt.length + 1; index++) {\n            if (spt[index - 1] == \"0\") {\n                if (index == 1) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 0;\";\n                } else if (index == 2) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 0;\";\n                } else if (index == 3) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 0;\";\n                } else if (index == 4) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 0;\";\n                }\n                msg.topic += \"UPDATE `Output` SET `Stat` = 0 WHERE `Number` = \" + String(index) + \";\";\n                RelayOutput[index][\"Stat\"] = 0;\n            } else if (spt[index - 1] == \"1\") {\n                if (index == 1) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Heater_1` = 1;\";\n                } else if (index == 2) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Heater_2` = 1;\";\n                } else if (index == 3) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Booster_Fan` = 1;\";\n                } else if (index == 4) {\n                    msg.topic += \"UPDATE `monitoringdata` SET `Exhaust_Fan` = 1;\";\n                }\n                msg.topic += \"UPDATE `Output` SET `Stat` = 1 WHERE `Number` = \" + String(index) + \";\";\n                RelayOutput[index][\"Stat\"] = 1;\n            }\n        }\n    }\n    flow.set(\"RelayOutput\", RelayOutput);\n    msg.topic += \"UPDATE `Operation` SET `Output` = \" + String(parseInt(msg.realdata.substring(10, 12), 16)) + \";\";\n}\n\n// }\nreturn msg;\n\nfunction hexToBinary(hexString) {\n    // Parse the hexadecimal string to an integer\n    const intValue = parseInt(hexString, 16);\n\n    // Convert the integer to a binary string\n    let binaryString = intValue.toString(2);\n\n    // Pad the binary string with leading zeros if necessary\n    // Assuming each hex digit should be represented by 4 binary digits\n    const hexLength = hexString.length;\n    const expectedBinaryLength = hexLength * 4;\n    while (binaryString.length < expectedBinaryLength) {\n        binaryString = '0'.concat(binaryString);\n    }\n\n    return binaryString;\n}\n\nfunction decimalToReversedBinary(decimal) {\n    // Convert the decimal number to a binary string\n    let binaryString = decimal.toString(2);\n\n    // Pad the binary string with leading zeros to ensure it has a length of 4 bits\n    while (binaryString.length < 4) {\n        binaryString = '0'.concat(binaryString);\n    }\n\n    // Reverse the binary string\n    // const reversedBinaryString = binaryString.split('').reverse().join('');\n\n    // return reversedBinaryString;\n    return binaryString;\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\n\n\nfunction hexToBinary2(hexString) {\n    // Menghapus karakter spasi jika ada\n    hexString = hexString.replace(/\\s+/g, '');\n    \n    // Memastikan string heksadesimal valid dan tidak lebih dari 2 karakter\n    if (!/^[\\da-fA-F]{1,2}$/.test(hexString)) {\n        throw new Error(\"Invalid hexadecimal string. Input should be 1 or 2 hex characters.\");\n    }\n\n    // Mengonversi string heksadesimal menjadi biner dengan panjang 8 bit\n    let binaryString = parseInt(hexString, 16).toString(2).padStart(8, '0');\n\n    return binaryString;\n}\n\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 260,
        "wires": [
            [
                "f653f7df10385059"
            ]
        ]
    },
    {
        "id": "78f55615c04a1769",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "g": "7ff6db086b81b7e7",
        "name": " ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 440,
        "wires": [
            [
                "fa3bcb095fdfb9a7"
            ]
        ]
    },
    {
        "id": "cad8d9fb0b3b7dab",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "a31f151e4e5d7b60",
        "name": "link in 12",
        "links": [
            "76e681351b7ebfb1"
        ],
        "x": 1275,
        "y": 240,
        "wires": [
            [
                "f3ac2cdc7fa4373e"
            ]
        ]
    },
    {
        "id": "f3ac2cdc7fa4373e",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "a31f151e4e5d7b60",
        "name": " ",
        "property": "payload.value",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1370,
        "y": 240,
        "wires": [
            [
                "80511c5878e7f281"
            ],
            [
                "02d4dc0e2995b26c"
            ]
        ]
    },
    {
        "id": "02d4dc0e2995b26c",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "a31f151e4e5d7b60",
        "name": " ",
        "func": "msg[\"Val\"] = msg.payload;\nmsg.topic = \"SELECT `AutoManual` FROM `information`;\";\n// var RelayInputIndoor = flow.get(\"RelayInputIndoor\");\n// for (let index = 0; index < RelayInputIndoor.length; index++) {\n//     if(RelayInputIndoor[index].keterangan == \"StatusIndoor\"){\n//         RelayInputIndoor[index][\"Stat\"] = msg.payload.value;\n//     }\n// }\n// flow.set(\"RelayInputIndoor\",RelayInputIndoor);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 260,
        "wires": [
            [
                "92f4b7d9aa20de7b"
            ]
        ]
    },
    {
        "id": "8cb74b9b019d03ca",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "a31f151e4e5d7b60",
        "name": "debug 63",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1880,
        "y": 260,
        "wires": []
    },
    {
        "id": "1b3e437abd5cab62",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "g": "1cbfcd06637d48ad",
        "name": "  ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "UPDATE `Input` SET `Stat` = 0;UPDATE `Output` SET `Stat` = 0;UPDATE `InputIndoor` SET `Stat` = 0;UPDATE `OutputIndoor` SET `Stat` = 0;UPDATE `Operation` SET `Output` = 0, `OutputIndoor` = 0;",
        "payload": "",
        "payloadType": "date",
        "x": 820,
        "y": 80,
        "wires": [
            [
                "b772f366ad097492"
            ]
        ]
    },
    {
        "id": "09187eb453511326",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "1cbfcd06637d48ad",
        "name": "link out 26",
        "mode": "link",
        "links": [
            "2b3434178f0ac999",
            "cf128b17d11f7fc7"
        ],
        "x": 1065,
        "y": 120,
        "wires": []
    },
    {
        "id": "fe9d2d5c8508a0c3",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "1cbfcd06637d48ad",
        "name": " ",
        "func": "msg.topic = \"select * from monitoringdata;select * from Input Order by Number ASC;select * from Output Order by Number ASC;select * from InputIndoor Order by Number ASC;select * from OutputIndoor Order by Number ASC;\";\nmsg.topic += \"SELECT * FROM `devicelist` WHERE `keterangan` NOT LIKE 'Relay%';\";\nflow.set(\"SystemStatus\",\"OFF\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 80,
        "wires": [
            [
                "4958a8f1dc7bf670"
            ]
        ]
    },
    {
        "id": "92f4b7d9aa20de7b",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "g": "a31f151e4e5d7b60",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1630,
        "y": 260,
        "wires": [
            [
                "0e3f4cd8e2a0e530"
            ]
        ]
    },
    {
        "id": "0e3f4cd8e2a0e530",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "a31f151e4e5d7b60",
        "name": " ",
        "func": "var AutoManual = msg.payload[0].AutoManual;\nmsg.payload = msg.Val;\nvar RelayInputIndoor = flow.get(\"RelayInputIndoor\");\nvar stats = false;\nfor (let index = 0; index < RelayInputIndoor.length; index++) {\n    if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && AutoManual){\n        flow.set(\"SystemStatus\",\"ON\");\n        stats = true;\n    }\n}\nmsg.payload = [stats,AutoManual];\nflow.set(\"RelayInputIndoor\",RelayInputIndoor);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 260,
        "wires": [
            [
                "8cb74b9b019d03ca"
            ]
        ]
    },
    {
        "id": "80511c5878e7f281",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "a31f151e4e5d7b60",
        "name": " ",
        "func": "flow.set(\"SystemStatus\",\"OFF\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "3f972b9577eb5b33",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": "Request",
        "func": "var RelayInput = flow.get(\"RelayInput\");\nvar RelayInputIndoor = flow.get(\"RelayInputIndoor\");\nvar RelayOutput = flow.get(\"RelayOutput\");\nvar RelayOutputIndoor = flow.get(\"RelayOutputIndoor\");\nfor (let index = 0; index < RelayInputIndoor.length; index++) {\n    if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && RelayInputIndoor[index].Stat == 1){\n        msg[\"StatusIndoor\"] = true;\n    }else if(RelayInputIndoor[index].keterangan == \"StatusIndoor\" && RelayInputIndoor[index].Stat == 0){\n        msg[\"StatusIndoor\"] = false;\n    }\n    if(RelayInputIndoor[index].keterangan == \"StatusOutdoor\" && RelayInputIndoor[index].Stat == 1){\n        msg[\"StatusOutdoor\"] = true;\n    }else if(RelayInputIndoor[index].keterangan == \"StatusOutdoor\" && RelayInputIndoor[index].Stat == 0){\n        msg[\"StatusOutdoor\"] = false;\n    }\n}\nfor (let index = 0; index < RelayInput.length; index++) {\n    if (RelayInput[index].keterangan == \"BoosterFan\" && RelayInput[index].Stat == 1){\n        msg[\"BoosterFan\"] = true;\n    } else if (RelayInput[index].keterangan == \"BoosterFan\" && RelayInput[index].Stat == 0){\n        msg[\"BoosterFan\"] = false;\n    }\n    if (RelayInput[index].keterangan == \"EF\" && RelayInput[index].Stat == 1){\n        msg[\"EF\"] = true;\n    } else if (RelayInput[index].keterangan == \"EF\" && RelayInput[index].Stat == 0){\n        msg[\"EF\"] = false;\n    }\n}\n\nmsg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayOutput' OR `keterangan` = 'RelayIndoor';\";\nmsg.topic += \"SELECT * FROM `Output` WHERE `keterangan` = 'BoosterFan' OR `keterangan` = 'EF' ORDER by `Number` ASC;\";\nmsg.topic += \"SELECT * FROM `OutputIndoor` WHERE `keterangan` = 'Fan' OR `keterangan` = 'Compressor' ORDER by `Number` ASC;\";\nmsg.topic += \"SELECT * FROM `Operation`;\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1120,
        "wires": [
            [
                "79d1e5f400e8c545"
            ]
        ]
    },
    {
        "id": "79d1e5f400e8c545",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1230,
        "y": 1120,
        "wires": [
            [
                "40fa6128af8ba52d",
                "3e2e3138c0de2877",
                "1a293fbb3e81e268",
                "42ef840fe439670f",
                "46451fec39f8e841",
                "c2895618f3b4cdb7"
            ]
        ]
    },
    {
        "id": "d1cda63e22d46295",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": "Off EF",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][1];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[3][0].Output));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[1][1].Number - 1] == \"1\") {\n    \n    spt[msg.payload[1][1].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutput\")[msg.payload[1][1].Number].Stat == 1){\n        msg.statusEF = true;\n    }else{\n        msg.statusEF = false;\n    }\n    msg.payload[3][0][\"Output\"] = 4;\n    \n}\n\nmsg.numberOutput = msg.payload[3][0].Output;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\" + \"000\" + String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1040,
        "wires": [
            [
                "e3bcbeb548a43740"
            ]
        ]
    },
    {
        "id": "5ee28832d25a6f45",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " ON",
        "property": "BoosterFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1080,
        "wires": [
            [
                "f31779116c5bb821"
            ]
        ]
    },
    {
        "id": "f31779116c5bb821",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " ON",
        "property": "StatusIndoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 1080,
        "wires": [
            [
                "b8560362bc1218d2"
            ]
        ]
    },
    {
        "id": "b8560362bc1218d2",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " ON",
        "property": "StatusOutdoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1750,
        "y": 1080,
        "wires": [
            [
                "6a6b80ccb9539197"
            ]
        ]
    },
    {
        "id": "6a6b80ccb9539197",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": "Off Compressor",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[3][0].OutputIndoor));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[2][1].Number - 1] == \"1\") {\n    \n    spt[msg.payload[2][1].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutputIndoor\")[msg.payload[2][1].Number].Stat == 1){\n        msg.statusCompressor = true;\n    }else{\n        msg.statusCompressor = false;\n    }\n    msg.payload[3][0][\"OutputIndoor\"] = 1;\n    \n}\n\nmsg.numberOutput = msg.payload[3][0].OutputIndoor;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\" + \"000\" + String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1080,
        "wires": [
            [
                "8daff62f0555fe14"
            ]
        ]
    },
    {
        "id": "e630b236c1d2b8ee",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " ON",
        "property": "BoosterFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1040,
        "wires": [
            [
                "1da0caa3cc640452"
            ]
        ]
    },
    {
        "id": "1da0caa3cc640452",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " ON",
        "property": "StatusIndoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 1040,
        "wires": [
            [
                "59463c781eab1470"
            ]
        ]
    },
    {
        "id": "59463c781eab1470",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " ON",
        "property": "StatusOutdoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1750,
        "y": 1040,
        "wires": [
            [
                "d1cda63e22d46295"
            ]
        ]
    },
    {
        "id": "40fa6128af8ba52d",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " ON",
        "property": "EF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 1040,
        "wires": [
            [
                "e630b236c1d2b8ee"
            ]
        ]
    },
    {
        "id": "3e2e3138c0de2877",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " OFF",
        "property": "EF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 1080,
        "wires": [
            [
                "5ee28832d25a6f45"
            ]
        ]
    },
    {
        "id": "1a293fbb3e81e268",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " OFF",
        "property": "EF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 1120,
        "wires": [
            [
                "feb7c55006e92cde"
            ]
        ]
    },
    {
        "id": "feb7c55006e92cde",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " ON",
        "property": "BoosterFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1120,
        "wires": [
            [
                "804d088f9d9f9e16"
            ]
        ]
    },
    {
        "id": "804d088f9d9f9e16",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " ON",
        "property": "StatusIndoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 1120,
        "wires": [
            [
                "02e193578a41d279"
            ]
        ]
    },
    {
        "id": "02e193578a41d279",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " OFF",
        "property": "StatusOutdoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1750,
        "y": 1120,
        "wires": [
            [
                "b8b6158225a70a1c"
            ]
        ]
    },
    {
        "id": "b8b6158225a70a1c",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": "Off FanIndoor",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[3][0].OutputIndoor));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[2][0].Number - 1] == \"1\") {\n    \n    spt[msg.payload[2][0].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutputIndoor\")[msg.payload[2][0].Number].Stat == 1){\n        msg.statusFan = true;\n    }else{\n        msg.statusFan = false;\n    }\n    msg.payload[3][0][\"OutputIndoor\"] = 0;\n    \n}\n\nmsg.numberOutput = msg.payload[3][0].OutputIndoor;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\" + \"000\" + String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1120,
        "wires": [
            [
                "35b570617ff00f4c"
            ]
        ]
    },
    {
        "id": "42ef840fe439670f",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": "debug 74",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1380,
        "y": 1240,
        "wires": []
    },
    {
        "id": "46451fec39f8e841",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " OFF",
        "property": "EF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 1160,
        "wires": [
            [
                "3e9c807a44ff9c54"
            ]
        ]
    },
    {
        "id": "3e9c807a44ff9c54",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " ON",
        "property": "BoosterFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1160,
        "wires": [
            [
                "1dda750ca3d657ba"
            ]
        ]
    },
    {
        "id": "1dda750ca3d657ba",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " OFF",
        "property": "StatusIndoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 1160,
        "wires": [
            [
                "35702a825d7ea7f1"
            ]
        ]
    },
    {
        "id": "35702a825d7ea7f1",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " OFF",
        "property": "StatusOutdoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1750,
        "y": 1160,
        "wires": [
            [
                "2138ff8d3224b227"
            ]
        ]
    },
    {
        "id": "2138ff8d3224b227",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": "Off BoosterFan",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][1];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[3][0].Output));\nvar spt = binarycurrent.split(\"\");\nif (binarycurrent[msg.payload[1][0].Number - 1] == \"1\") {\n    \n    spt[msg.payload[1][0].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 1){\n        msg.statusBoosterFan = true;\n    }else{\n        msg.statusBoosterFan = false;\n    }\n    msg.payload[3][0][\"Output\"] = 0;\n}\n\nmsg.numberOutput = msg.payload[3][0].Output;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\" + \"000\" + String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1160,
        "wires": [
            [
                "8567b6fea0c1832e"
            ]
        ]
    },
    {
        "id": "a040cdd296f89df4",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1050,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "b4d32bd3897234eb",
        "type": "delay",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " ",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 910,
        "y": 1120,
        "wires": [
            [
                "3f972b9577eb5b33",
                "a040cdd296f89df4"
            ]
        ]
    },
    {
        "id": "c2895618f3b4cdb7",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " OFF",
        "property": "EF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 1200,
        "wires": [
            [
                "888e06c328ef570b"
            ]
        ]
    },
    {
        "id": "888e06c328ef570b",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " OFF",
        "property": "BoosterFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1510,
        "y": 1200,
        "wires": [
            [
                "da20796f860b477b"
            ]
        ]
    },
    {
        "id": "da20796f860b477b",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " OFF",
        "property": "StatusIndoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1630,
        "y": 1200,
        "wires": [
            [
                "6caf09005d5d4f8c"
            ]
        ]
    },
    {
        "id": "6caf09005d5d4f8c",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " OFF",
        "property": "StatusOutdoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1750,
        "y": 1200,
        "wires": [
            [
                "86889498473ea3c1"
            ]
        ]
    },
    {
        "id": "86889498473ea3c1",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": "IDLE",
        "func": "flow.set(\"cmdauto\", \"None\");\nmsg.reset = true;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 1200,
        "wires": [
            [
                "05f650927ae5c01f",
                "4cfc816ed42ed14a"
            ]
        ]
    },
    {
        "id": "05f650927ae5c01f",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": "link out 31",
        "mode": "link",
        "links": [
            "acd5dc2f19d30680",
            "6d5f07b04733e577"
        ],
        "x": 1955,
        "y": 1200,
        "wires": []
    },
    {
        "id": "4cfc816ed42ed14a",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": "debug 76",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1870,
        "y": 1240,
        "wires": []
    },
    {
        "id": "6345195148b114ad",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "7ff6db086b81b7e7",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "SystemStatus",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 370,
        "y": 520,
        "wires": []
    },
    {
        "id": "93ed58172caefb99",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "name": "Auto Panel",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04030000FF0000000002",
        "payloadType": "str",
        "x": 460,
        "y": 1180,
        "wires": [
            [
                "08ce2e838792223b"
            ]
        ]
    },
    {
        "id": "ab5c7999a8ec94cb",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "name": "IncomingData",
        "mode": "link",
        "links": [
            "0cbc509033550b7f"
        ],
        "x": 715,
        "y": 1360,
        "wires": []
    },
    {
        "id": "8232630545be6324",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "name": "BoosterFanAktif",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04030000DB0400000002",
        "payloadType": "str",
        "x": 480,
        "y": 1260,
        "wires": [
            [
                "42579082ec0f3bf3"
            ]
        ]
    },
    {
        "id": "f2f9d8c7c79d7352",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "name": "FanIndoor Nyala",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "040500000201000003",
        "payloadType": "str",
        "x": 480,
        "y": 1300,
        "wires": [
            [
                "b717f2522f8a0316"
            ]
        ]
    },
    {
        "id": "a132d3a11d6a78c2",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "name": "Compressor Nyala",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "040500000003000003",
        "payloadType": "str",
        "x": 490,
        "y": 1340,
        "wires": [
            [
                "fbb662a0c4d897d8"
            ]
        ]
    },
    {
        "id": "4506e171551a05b6",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "name": "EF Nyala",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "040300009B0C00000002",
        "payloadType": "str",
        "x": 460,
        "y": 1380,
        "wires": [
            [
                "67e6722eebecb451"
            ]
        ]
    },
    {
        "id": "b3f450d927ca57aa",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "name": "Manual Panel",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04030000FE0000000002",
        "payloadType": "str",
        "x": 470,
        "y": 1220,
        "wires": [
            [
                "3f493871e6270acf"
            ]
        ]
    },
    {
        "id": "04086c37d4da49b1",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "name": "EF Mati",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04030000DB0400000002",
        "payloadType": "str",
        "x": 450,
        "y": 1420,
        "wires": [
            [
                "80365610c054e775"
            ]
        ]
    },
    {
        "id": "4870b9a1b400f946",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "name": "BoosterFan Mati",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04030000FF0000000002",
        "payloadType": "str",
        "x": 480,
        "y": 1540,
        "wires": [
            [
                "4ef7115bf6b00b61"
            ]
        ]
    },
    {
        "id": "e9dce8c2968fc362",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "name": "FanIndoor Mati",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "040500000300000003",
        "payloadType": "str",
        "x": 480,
        "y": 1500,
        "wires": [
            [
                "0c502b1bde54a0fc"
            ]
        ]
    },
    {
        "id": "d00f6db0ab2d050c",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "g": "8198882257923722",
        "name": "Compressor Mati",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "040500000201000003",
        "payloadType": "str",
        "x": 480,
        "y": 1460,
        "wires": [
            [
                "6010df32067d351f"
            ]
        ]
    },
    {
        "id": "699bc22c1a819a76",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "b2cfefbaa250692d",
        "name": "link in 14",
        "links": [
            "d1d6d888207e0204",
            "db77b0fb0b9de01a"
        ],
        "x": 805,
        "y": 580,
        "wires": [
            [
                "8f99e09dae854b85",
                "88395c793067a2e5"
            ]
        ]
    },
    {
        "id": "d1d6d888207e0204",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "94afd02c3878fc20",
        "name": "link out 32",
        "mode": "link",
        "links": [
            "699bc22c1a819a76"
        ],
        "x": 715,
        "y": 680,
        "wires": []
    },
    {
        "id": "4d48619bf5bbadca",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "94afd02c3878fc20",
        "name": "link out 35",
        "mode": "link",
        "links": [
            "16853bc05e3e9d02"
        ],
        "x": 715,
        "y": 720,
        "wires": []
    },
    {
        "id": "16853bc05e3e9d02",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "6a72c936b627e910",
        "name": "link in 17",
        "links": [
            "4d48619bf5bbadca",
            "4de6df107525a91d"
        ],
        "x": 805,
        "y": 740,
        "wires": [
            [
                "ede82a4075db7adf",
                "6a4f334d1f97ed84"
            ]
        ]
    },
    {
        "id": "b1e9832db3a61f1b",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "94afd02c3878fc20",
        "name": "link out 36",
        "mode": "link",
        "links": [
            "9e6d9789580139b4"
        ],
        "x": 715,
        "y": 760,
        "wires": []
    },
    {
        "id": "9e6d9789580139b4",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "efd67cff70aea370",
        "name": "link in 18",
        "links": [
            "b1e9832db3a61f1b",
            "070b79b318a8afd6"
        ],
        "x": 75,
        "y": 1040,
        "wires": [
            [
                "5325683f3d621a49",
                "aa65a38826eefec0",
                "07348a1e922e2081"
            ]
        ]
    },
    {
        "id": "c476e780880d1b2d",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "94afd02c3878fc20",
        "name": "link out 37",
        "mode": "link",
        "links": [
            "a432e9a4cfafa890"
        ],
        "x": 715,
        "y": 800,
        "wires": []
    },
    {
        "id": "a432e9a4cfafa890",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "1aacce764e0ed47b",
        "name": "link in 19",
        "links": [
            "c476e780880d1b2d",
            "12dca0f4de64a244"
        ],
        "x": 805,
        "y": 900,
        "wires": [
            [
                "dae22984db30bba3",
                "b48cfcb16da97cdb"
            ]
        ]
    },
    {
        "id": "0a7ea2c4e927a1bd",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "94afd02c3878fc20",
        "name": "link out 38",
        "mode": "link",
        "links": [
            "6d5f07b04733e577"
        ],
        "x": 715,
        "y": 840,
        "wires": []
    },
    {
        "id": "6d5f07b04733e577",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": "link in 20",
        "links": [
            "0a7ea2c4e927a1bd",
            "05f650927ae5c01f",
            "df96c2951fc505fc"
        ],
        "x": 805,
        "y": 1120,
        "wires": [
            [
                "b4d32bd3897234eb",
                "05fbb05ae3d0d88a"
            ]
        ]
    },
    {
        "id": "b772f366ad097492",
        "type": "delay",
        "z": "bca4771a12cb11e6",
        "g": "1cbfcd06637d48ad",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 960,
        "y": 80,
        "wires": [
            [
                "09187eb453511326",
                "fe9d2d5c8508a0c3"
            ]
        ]
    },
    {
        "id": "d98271f4f071f32e",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "cbbdeba1125ca19b",
        "name": "link in 21",
        "links": [
            "4c80d3fd31ff5440"
        ],
        "x": 75,
        "y": 120,
        "wires": [
            [
                "2815e1177e773fe4"
            ]
        ]
    },
    {
        "id": "88395c793067a2e5",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "g": "b2cfefbaa250692d",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 890,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "6a4f334d1f97ed84",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "g": "6a72c936b627e910",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 890,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "07348a1e922e2081",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "g": "efd67cff70aea370",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 170,
        "y": 1080,
        "wires": [
            []
        ]
    },
    {
        "id": "b48cfcb16da97cdb",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "g": "1aacce764e0ed47b",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 910,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "05fbb05ae3d0d88a",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "500",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 910,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "35a56d8a804f6957",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": " ",
        "func": "if(flow.get(\"SystemStatus\") != \"ON\"){\n    msg.payload = null;\n}\nmsg.SystemStatus = flow.get(\"SystemStatus\");\nmsg.rate = (flow.get(\"SensorQty\").length*8000)+2000;\nmsg.delay = msg.rate-2000;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 420,
        "wires": [
            [
                "1c505eaeda7d6b6a"
            ]
        ]
    },
    {
        "id": "1c505eaeda7d6b6a",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": " ",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1010,
        "y": 420,
        "wires": [
            [
                "9a489bd4e0857cbf",
                "525a257b01798881"
            ],
            [
                "3b732ba5f038697e",
                "fe72150586726874"
            ]
        ]
    },
    {
        "id": "9a489bd4e0857cbf",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1150,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "525a257b01798881",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "7",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1150,
        "y": 380,
        "wires": [
            [
                "fbfbf9d305f0d43a"
            ]
        ]
    },
    {
        "id": "fbfbf9d305f0d43a",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": "Turn On Booster",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayOutput' OR `keterangan` = 'RelayIndoor';\";\nmsg.topic += \"SELECT * FROM `Output` WHERE `keterangan` = 'BoosterFan' OR `keterangan` = 'EF';\";\nmsg.topic += \"SELECT * FROM `OutputIndoor` WHERE `keterangan` = 'Fan' OR `keterangan` = 'Compressor';\";\nmsg.topic += \"SELECT * FROM `Operation`;\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 420,
        "wires": [
            [
                "4da408452df5e1e3"
            ]
        ]
    },
    {
        "id": "4da408452df5e1e3",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 1470,
        "y": 420,
        "wires": [
            [
                "ea14610f882fc427"
            ]
        ]
    },
    {
        "id": "ea14610f882fc427",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": " On1",
        "func": "msg.resultsql = msg.payload;\nvar binarycurrent = \"\";\nif(!msg.BoosterFan){\n    var d = msg.payload[0][1];\n    var cmd = \"\";\n    msg.statusEH1 = false;\n    msg.statusEH2 = false;\n    for (let index = 0; index < Object.keys(d).length - 2; index++) {\n        cmd += d[Object.keys(d)[index]];\n    }\n    cmd += \"01\";\n    binarycurrent = reverseString(decToBinary(msg.payload[3][0].Output));\n    var spt = binarycurrent.split(\"\");\n    if (spt[msg.payload[1][0].Number - 1] == \"0\" && !msg.BoosterFan && flow.get(\"SystemStatus\") == \"ON\") {\n        \n        spt[msg.payload[1][0].Number - 1] = \"1\";\n        binarycurrent = spt.join(\"\");\n        if(flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 0){\n            msg.statusBooster = true;\n        }else{\n            msg.statusBooster = false;\n        }\n        msg.payload[3][0][\"Output\"] = parseInt(String(msg.payload[3][0].Output)) + parseInt(String(msg.payload[1][0].Dec));\n    }\n    spt = binarycurrent.split(\"\");\n    \n    if (spt[msg.payload[1][1].Number - 1] == \"0\" && !msg.EF && msg.StatusIndoor && msg.BoosterFan && msg.StatusOutdoor){\n        msg.statusEF = true;\n    }\n    msg.numberOutput = msg.payload[3][0].Output;\n    var hex = binaryToHex(reverseString(binarycurrent));\n    cmd += \"0000\" + \"000\" + String(dec2hex(hex));\n    msg.payload = cmd;\n    return msg;\n} else if (!msg.EF && msg.StatusIndoor && msg.BoosterFan && msg.StatusOutdoor){\n    var d = msg.payload[0][1];\n    var cmd = \"\";\n    msg.statusEH1 = false;\n    msg.statusEH2 = false;\n    for (let index = 0; index < Object.keys(d).length - 2; index++) {\n        cmd += d[Object.keys(d)[index]];\n    }\n    cmd += \"01\";\n    binarycurrent = reverseString(decToBinary(msg.payload[3][0].Output));\n    var spt = binarycurrent.split(\"\");\n    if (spt[msg.payload[1][0].Number - 1] == \"0\" && !msg.BoosterFan && msg.StatusIndoor) {\n\n        spt[msg.payload[1][0].Number - 1] = \"1\";\n        binarycurrent = spt.join(\"\");\n        if (flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 0) {\n            msg.statusBooster = true;\n        } else {\n            msg.statusBooster = false;\n        }\n        msg.payload[3][0][\"Output\"] = parseInt(String(msg.payload[3][0].Output)) + parseInt(String(msg.payload[1][0].Dec));\n    }\n    spt = binarycurrent.split(\"\");\n\n    if (spt[msg.payload[1][1].Number - 1] == \"0\") {\n        msg.statusEF = true;\n    }\n    msg.numberOutput = msg.payload[3][0].Output;\n    var hex = binaryToHex(reverseString(binarycurrent));\n    cmd += \"0000\" + \"000\" + String(dec2hex(hex));\n    msg.payload = cmd;\n    return msg;\n}else{\n    var d = msg.payload[0][0];\n    var cmd = \"\";\n    \n    for (let index = 0; index < Object.keys(d).length - 2; index++) {\n        cmd += d[Object.keys(d)[index]];\n    }\n    cmd += \"01\";\n    \n    binarycurrent = reverseString(decToBinary(msg.payload[3][0].OutputIndoor));\n    var spt = binarycurrent.split(\"\");\n    console.log(spt);\n    console.log(msg.payload[2][0].Number - 1);\n    console.log(spt[msg.payload[2][0].Number - 1]);\n    if (spt[msg.payload[2][0].Number - 1] == \"0\" && msg.BoosterFan) {\n        console.log(binarycurrent);\n        spt[msg.payload[2][0].Number - 1] = \"1\";\n        binarycurrent = spt.join(\"\");\n        console.log(binarycurrent);\n        if(flow.get(\"RelayOutputIndoor\")[msg.payload[1][0].Number].Stat == 0){\n            msg.statusFan = true;\n        }else{\n            msg.statusFan = false;\n        }\n        \n        msg.payload[3][0][\"OutputIndoor\"] = parseInt(String(msg.payload[3][0].OutputIndoor)) + parseInt(String(msg.payload[2][0].Dec));\n    }\n    if (binarycurrent[msg.payload[2][1].Number - 1] == \"0\" && !msg.statusFan && !msg.StatusOutdoor){\n        msg.statusCompressor = true;\n    }else{\n        msg.statusCompressor = false;\n    }\n    msg.numberOutputIndoor = msg.payload[3][0].OutputIndoor;\n    var hex = binaryToHex(reverseString(binarycurrent));\n    cmd += \"0000\" + \"000\" + String(dec2hex(hex));\n    msg.payload = cmd;\n    return msg;\n}\n\n\n\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1590,
        "y": 420,
        "wires": [
            [
                "77b2cba796d2f531",
                "4043dbbf93d75df2",
                "a5409b65184165d3",
                "ec5ef574d79e5506"
            ]
        ]
    },
    {
        "id": "77b2cba796d2f531",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": " On Booster",
        "property": "statusBooster",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1750,
        "y": 400,
        "wires": [
            [
                "a27a7d74181d73f9"
            ]
        ]
    },
    {
        "id": "4043dbbf93d75df2",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": " On EF",
        "property": "statusEF",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1730,
        "y": 440,
        "wires": [
            [
                "a1807d9433fd3b20"
            ]
        ]
    },
    {
        "id": "a5409b65184165d3",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": " On Fan",
        "property": "statusFan",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1740,
        "y": 360,
        "wires": [
            [
                "8f7f8be627e7f4d2"
            ]
        ]
    },
    {
        "id": "ec5ef574d79e5506",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": " On Compressor",
        "property": "statusCompressor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1760,
        "y": 480,
        "wires": [
            [
                "1c2dcf8730950b3f"
            ]
        ]
    },
    {
        "id": "a27a7d74181d73f9",
        "type": "delay",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": " ",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1910,
        "y": 400,
        "wires": [
            [
                "09a3b6a802023dc8"
            ]
        ]
    },
    {
        "id": "a1807d9433fd3b20",
        "type": "delay",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": " ",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1910,
        "y": 440,
        "wires": [
            [
                "62b6001d94bcac60"
            ]
        ]
    },
    {
        "id": "8f7f8be627e7f4d2",
        "type": "delay",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": " ",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1910,
        "y": 360,
        "wires": [
            [
                "266dedab938cb002"
            ]
        ]
    },
    {
        "id": "1c2dcf8730950b3f",
        "type": "delay",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": " ",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1910,
        "y": 480,
        "wires": [
            [
                "a6711d252207f1c0"
            ]
        ]
    },
    {
        "id": "62b6001d94bcac60",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": "On EF",
        "func": "msg.payload = msg.resultsql;\nvar d = msg.payload[0][1];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.numberOutput));\nvar spt = binarycurrent.split(\"\");\nif(binarycurrent[msg.payload[1][1].Number-1] == \"0\"){\n    \n    spt[msg.payload[1][1].Number - 1] = \"1\";\n    binarycurrent = spt.join(\"\");\n    if (flow.get(\"RelayOutput\")[msg.payload[1][1].Number].Stat == 0){\n        msg.statusEH2 = true;\n    }else{\n        msg.statusEH2 = false;\n    }\n    console.log(parseInt(String(msg.payload[1][1].Dec)));\n   msg[\"numberOutput\"] = parseInt(String(msg.numberOutput)) +  parseInt(String(msg.payload[1][1].Dec));\n}\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2030,
        "y": 440,
        "wires": [
            [
                "631a5792b3f53e2e"
            ]
        ]
    },
    {
        "id": "a6711d252207f1c0",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": "On Compressor",
        "func": "msg.payload = msg.resultsql;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.numberOutputIndoor));\nvar spt = binarycurrent.split(\"\");\nif(binarycurrent[msg.payload[1][1].Number-1] == \"0\"){\n    \n    spt[msg.payload[2][1].Number - 1] = \"1\";\n    binarycurrent = spt.join(\"\");\n    \n   msg[\"numberOutputIndoor\"] = parseInt(String(msg.numberOutputIndoor)) +  parseInt(String(msg.payload[2][1].Dec));\n}\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2060,
        "y": 480,
        "wires": [
            [
                "96bdfb3b96f0e2d1"
            ]
        ]
    },
    {
        "id": "95c264c90bd714f9",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": "link out 23",
        "mode": "link",
        "links": [
            "dd1e1bf4fa001f32"
        ],
        "x": 2215,
        "y": 420,
        "wires": []
    },
    {
        "id": "5a9616ba520d413a",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "7ff6db086b81b7e7",
        "name": "link out 39",
        "mode": "link",
        "links": [
            "5936f1df53932369"
        ],
        "x": 455,
        "y": 480,
        "wires": []
    },
    {
        "id": "5936f1df53932369",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": "link in 22",
        "links": [
            "5a9616ba520d413a"
        ],
        "x": 805,
        "y": 420,
        "wires": [
            [
                "35a56d8a804f6957"
            ]
        ]
    },
    {
        "id": "3b2a44cd4136616d",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "g": "7ff6db086b81b7e7",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 490,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "cf128b17d11f7fc7",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "aadd16a462e83be5",
        "name": "link in 23",
        "links": [
            "a647954ae4d429aa",
            "f653f7df10385059",
            "4c17409ddbc782a5",
            "3fae4a69287e8867",
            "983c5238c51828dc",
            "09187eb453511326"
        ],
        "x": 525,
        "y": 120,
        "wires": [
            [
                "9d6f10db5c0fea06"
            ]
        ]
    },
    {
        "id": "034e761815e481f6",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "94afd02c3878fc20",
        "name": "link in 24",
        "links": [
            "6c88cbac6c1e1314"
        ],
        "x": 265,
        "y": 880,
        "wires": [
            [
                "53fcd0a658899b61",
                "c7d1752efe372b78"
            ]
        ]
    },
    {
        "id": "c7db0b52451bd342",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "9a2233b4c5e85c0f",
        "name": "link in 25",
        "links": [
            "d072fc3ec94d6a47"
        ],
        "x": 805,
        "y": 1460,
        "wires": [
            [
                "13ed67235efcb4e7"
            ]
        ]
    },
    {
        "id": "065b11c9b9020e33",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "9a2233b4c5e85c0f",
        "name": "link in 26",
        "links": [
            "1f8f8dcba5857b3f"
        ],
        "x": 805,
        "y": 1420,
        "wires": [
            [
                "efe1a2d2448d86c1"
            ]
        ]
    },
    {
        "id": "1f8f8dcba5857b3f",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "9a2233b4c5e85c0f",
        "name": "link out 40",
        "mode": "link",
        "links": [
            "065b11c9b9020e33"
        ],
        "x": 1005,
        "y": 1340,
        "wires": []
    },
    {
        "id": "d072fc3ec94d6a47",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "9a2233b4c5e85c0f",
        "name": "link out 41",
        "mode": "link",
        "links": [
            "c7db0b52451bd342"
        ],
        "x": 1005,
        "y": 1380,
        "wires": []
    },
    {
        "id": "f5e931f2c8849151",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "9a2233b4c5e85c0f",
        "name": "link out 42",
        "mode": "link",
        "links": [
            "dd1e1bf4fa001f32"
        ],
        "x": 1105,
        "y": 1440,
        "wires": []
    },
    {
        "id": "d4819d014b224568",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "9965847832a173f9",
        "name": "link out 43",
        "mode": "link",
        "links": [
            "dd1e1bf4fa001f32"
        ],
        "x": 2065,
        "y": 1100,
        "wires": []
    },
    {
        "id": "738e22f45c2ce650",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "bc029c22e8a19bce",
        "name": "link in 28",
        "links": [
            "b07e4e6ebad074fb"
        ],
        "x": 75,
        "y": 1300,
        "wires": [
            [
                "c04809c8d4f3f6d5",
                "b851603d2bbe2e65",
                "35a58c5190c3dfd4",
                "5644d3499103fcdb",
                "db1d8ffdb99c0bc7"
            ]
        ]
    },
    {
        "id": "c04809c8d4f3f6d5",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "bc029c22e8a19bce",
        "name": "Status AC/Fan",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "StatusIndoor",
        "targetType": "msg",
        "statusVal": "StatusIndoor",
        "statusType": "auto",
        "x": 200,
        "y": 1180,
        "wires": []
    },
    {
        "id": "5644d3499103fcdb",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "bc029c22e8a19bce",
        "name": "Status Compressor",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "StatusOutdoor",
        "targetType": "msg",
        "statusVal": "StatusIndoor",
        "statusType": "auto",
        "x": 210,
        "y": 1240,
        "wires": []
    },
    {
        "id": "35a58c5190c3dfd4",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "bc029c22e8a19bce",
        "name": "Status BoosterFan",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "BoosterFan",
        "targetType": "msg",
        "statusVal": "StatusIndoor",
        "statusType": "auto",
        "x": 210,
        "y": 1300,
        "wires": []
    },
    {
        "id": "b851603d2bbe2e65",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "bc029c22e8a19bce",
        "name": "Status EF",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "EF",
        "targetType": "msg",
        "statusVal": "StatusIndoor",
        "statusType": "auto",
        "x": 180,
        "y": 1360,
        "wires": []
    },
    {
        "id": "db1d8ffdb99c0bc7",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "bc029c22e8a19bce",
        "name": "Status StartLoops",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "StartLoops",
        "targetType": "msg",
        "statusVal": "StatusIndoor",
        "statusType": "auto",
        "x": 210,
        "y": 1420,
        "wires": []
    },
    {
        "id": "d9cda9d21b5e59c9",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "name": "link in 29",
        "links": [
            "3b732ba5f038697e"
        ],
        "x": 1525,
        "y": 580,
        "wires": [
            [
                "0de2a9fe6eca8de8"
            ]
        ]
    },
    {
        "id": "ee9d73a6060c9c58",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 77",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2380,
        "y": 540,
        "wires": []
    },
    {
        "id": "46cf92545e80c1d2",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "Request",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload;\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"00\";\ncmd += \"0000\" + \"0000\" ;\nmsg.payload = cmd;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 600,
        "wires": [
            [
                "f3a38b43331d2ea8"
            ]
        ]
    },
    {
        "id": "eb1793a6bf455733",
        "type": "subflow:e9b71a55.b25c68",
        "z": "bca4771a12cb11e6",
        "name": "",
        "x": 1870,
        "y": 600,
        "wires": [
            [
                "46cf92545e80c1d2",
                "a4cce0a4f8811c1e",
                "2952e9c1747ca3fb"
            ],
            []
        ]
    },
    {
        "id": "a5b90e10b27bf285",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "func": "msg[\"delay\"] = 8000;\nmsg.payload = flow.get(\"SensorQty\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 580,
        "wires": [
            [
                "eb1793a6bf455733"
            ]
        ]
    },
    {
        "id": "0de2a9fe6eca8de8",
        "type": "delay",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "day",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": true,
        "outputs": 1,
        "x": 1610,
        "y": 580,
        "wires": [
            [
                "eba9e962a7d47c72",
                "a5b90e10b27bf285"
            ]
        ]
    },
    {
        "id": "3b732ba5f038697e",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": "link out 44",
        "mode": "link",
        "links": [
            "d9cda9d21b5e59c9"
        ],
        "x": 1115,
        "y": 460,
        "wires": []
    },
    {
        "id": "fe72150586726874",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "4a2b08a3489a859c",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "SystemStatus",
        "targetType": "msg",
        "statusVal": "SystemStatus",
        "statusType": "auto",
        "x": 1150,
        "y": 460,
        "wires": []
    },
    {
        "id": "5df25e4c89a32048",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "1cbfcd06637d48ad",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 100,
        "wires": []
    },
    {
        "id": "eba9e962a7d47c72",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "250",
        "extend": false,
        "overrideDelay": true,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1750,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "f3a38b43331d2ea8",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "func": "if(flow.get(\"SystemStatus\") != \"ON\"){\n    msg.payload = null;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 600,
        "wires": [
            [
                "6a72d4f3b0d96b83"
            ]
        ]
    },
    {
        "id": "6a72d4f3b0d96b83",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 2250,
        "y": 600,
        "wires": [
            [
                "ee9d73a6060c9c58",
                "f52c4ff255db8a17"
            ]
        ]
    },
    {
        "id": "f52c4ff255db8a17",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "d": true,
        "name": "link out 45",
        "mode": "link",
        "links": [
            "dd1e1bf4fa001f32"
        ],
        "x": 2345,
        "y": 600,
        "wires": []
    },
    {
        "id": "a4cce0a4f8811c1e",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 1990,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "2952e9c1747ca3fb",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 79",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 640,
        "wires": []
    },
    {
        "id": "ae459cb84c6fb828",
        "type": "debug",
        "z": "12638c94c64653f3",
        "g": "61b2c6fee1e1e6a8",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 100,
        "wires": []
    },
    {
        "id": "a07e8f90b297d827",
        "type": "mysql",
        "z": "12638c94c64653f3",
        "g": "61b2c6fee1e1e6a8",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 540,
        "y": 100,
        "wires": [
            [
                "ae459cb84c6fb828"
            ]
        ]
    },
    {
        "id": "ecf99e1674c37281",
        "type": "function",
        "z": "12638c94c64653f3",
        "g": "61b2c6fee1e1e6a8",
        "name": "Select Value",
        "func": "// msg.topic = \"SELECT * FROM MonitoringData\";\n// msg.topic = \"SELECT Temp_Cathlab FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\nmsg.topic = \"SELECT * FROM information  LIMIT 1\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 100,
        "wires": [
            [
                "a07e8f90b297d827"
            ]
        ]
    },
    {
        "id": "1c68bf52134e0fe0",
        "type": "inject",
        "z": "12638c94c64653f3",
        "g": "61b2c6fee1e1e6a8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "ecf99e1674c37281"
            ]
        ]
    },
    {
        "id": "725b446197e7c4b5",
        "type": "http in",
        "z": "12638c94c64653f3",
        "g": "08e96d47ded9c2f2",
        "name": "",
        "url": "/getData",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "813969837ca2e43c"
            ]
        ]
    },
    {
        "id": "022e9895230ac2ce",
        "type": "mysql",
        "z": "12638c94c64653f3",
        "g": "08e96d47ded9c2f2",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 580,
        "y": 220,
        "wires": [
            [
                "dbcc260e20c738be"
            ]
        ]
    },
    {
        "id": "813969837ca2e43c",
        "type": "function",
        "z": "12638c94c64653f3",
        "g": "08e96d47ded9c2f2",
        "name": "Query",
        "func": "// msg.topic = \"SELECT Temp_Machine FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\nmsg.topic = \"SELECT * FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 220,
        "wires": [
            [
                "022e9895230ac2ce"
            ]
        ]
    },
    {
        "id": "dbcc260e20c738be",
        "type": "http response",
        "z": "12638c94c64653f3",
        "g": "08e96d47ded9c2f2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 220,
        "wires": []
    },
    {
        "id": "43ed28f7c305890b",
        "type": "http in",
        "z": "12638c94c64653f3",
        "g": "08e96d47ded9c2f2",
        "name": "",
        "url": "/getDataSetting",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "af66a956d2da2a80"
            ]
        ]
    },
    {
        "id": "af66a956d2da2a80",
        "type": "function",
        "z": "12638c94c64653f3",
        "g": "08e96d47ded9c2f2",
        "name": "Query",
        "func": "// msg.topic = \"SELECT Temp_Machine FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\nmsg.topic = \"SELECT * FROM setting  LIMIT 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 280,
        "wires": [
            [
                "69415a5df0fd84c4"
            ]
        ]
    },
    {
        "id": "598846368d18598c",
        "type": "http response",
        "z": "12638c94c64653f3",
        "g": "08e96d47ded9c2f2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 280,
        "wires": []
    },
    {
        "id": "69415a5df0fd84c4",
        "type": "mysql",
        "z": "12638c94c64653f3",
        "g": "08e96d47ded9c2f2",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 580,
        "y": 280,
        "wires": [
            [
                "598846368d18598c"
            ]
        ]
    },
    {
        "id": "784018e13e7c3854",
        "type": "mysql",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 940,
        "y": 460,
        "wires": [
            [
                "1df172a7f2f4ce6f"
            ]
        ]
    },
    {
        "id": "1df172a7f2f4ce6f",
        "type": "http response",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 460,
        "wires": []
    },
    {
        "id": "4e770fef67f689a3",
        "type": "http in",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "name": "",
        "url": "/setDataTemp",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 460,
        "wires": [
            [
                "33d61628fd38b924"
            ]
        ]
    },
    {
        "id": "33d61628fd38b924",
        "type": "function",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 460,
        "wires": [
            [
                "24dd9e1c51bd7bcf"
            ]
        ]
    },
    {
        "id": "24dd9e1c51bd7bcf",
        "type": "function",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "name": "UPDATE setting SET TempCathlab",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET TempCathlab = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 460,
        "wires": [
            [
                "784018e13e7c3854"
            ]
        ]
    },
    {
        "id": "375be8b9dde709a6",
        "type": "http in",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "name": "",
        "url": "/setDataRH",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 500,
        "wires": [
            [
                "4f80bdf1c80177c1"
            ]
        ]
    },
    {
        "id": "4f80bdf1c80177c1",
        "type": "function",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 500,
        "wires": [
            [
                "7cf831fbd7e15766"
            ]
        ]
    },
    {
        "id": "7cf831fbd7e15766",
        "type": "function",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "name": "UPDATE setting SET RHCathlab",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET RHCathlab = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 500,
        "wires": [
            [
                "784018e13e7c3854"
            ]
        ]
    },
    {
        "id": "99f4c9c990d12fad",
        "type": "http in",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "name": "",
        "url": "/setDataTempM",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 540,
        "wires": [
            [
                "632dc6d6e0490659"
            ]
        ]
    },
    {
        "id": "632dc6d6e0490659",
        "type": "function",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 540,
        "wires": [
            [
                "40f57b3a5e3f83af"
            ]
        ]
    },
    {
        "id": "40f57b3a5e3f83af",
        "type": "function",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "name": "UPDATE setting SET TempMachine ",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET TempMachine = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 540,
        "wires": [
            [
                "784018e13e7c3854"
            ]
        ]
    },
    {
        "id": "35a996afe3bfd958",
        "type": "http in",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "name": "",
        "url": "/setDataRHM",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 580,
        "wires": [
            [
                "fd9c82c86561755f"
            ]
        ]
    },
    {
        "id": "fd9c82c86561755f",
        "type": "function",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 580,
        "wires": [
            [
                "dad3e82fef0faa4b"
            ]
        ]
    },
    {
        "id": "dad3e82fef0faa4b",
        "type": "function",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "name": "UPDATE setting SET RHMachine",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET RHMachine = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 580,
        "wires": [
            [
                "784018e13e7c3854"
            ]
        ]
    },
    {
        "id": "be230af5a7c07cf0",
        "type": "function",
        "z": "12638c94c64653f3",
        "g": "b39815c0aef9d02e",
        "name": "Prepare data for inserting into the database",
        "func": "// Generate sample data to insert\nconst data = {\n    Timestamp: new Date(),\n    Temp_Cathlab: 25.5,\n    RH_Cathlab: 60,\n    Temp_Machine: 27.8,\n    RH_Machine: 55.5,\n    Outdoor_Unit: 1,\n    AHU_Status: 1,\n    Pre_Filter: 155,\n    HEPA_Filter: 155,\n    Booster_Fan: 1,\n    Exhaust_Fan: 1,\n    Heater_1: 1,\n    Heater_2: 1\n};\n\n// Construct the SQL query\nconst keys = Object.keys(data);\nconst values = Object.values(data).map(value => typeof value === 'string' ? '${value}' : value);\nconst placeholders = keys.map(() => '?').join(',');\nconst query = `INSERT INTO monitoringdata (${keys.join(',')}) VALUES (${placeholders})`;\n\n// Set the query as payload for the next node\nmsg.topic = query;\nmsg.payload = values;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 720,
        "wires": [
            [
                "0bdff582212b9d15"
            ]
        ]
    },
    {
        "id": "0085262b1f8b7920",
        "type": "inject",
        "z": "12638c94c64653f3",
        "g": "b39815c0aef9d02e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 720,
        "wires": [
            [
                "be230af5a7c07cf0"
            ]
        ]
    },
    {
        "id": "c47e2b8443325cfd",
        "type": "debug",
        "z": "12638c94c64653f3",
        "g": "b39815c0aef9d02e",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 720,
        "wires": []
    },
    {
        "id": "0bdff582212b9d15",
        "type": "mysql",
        "z": "12638c94c64653f3",
        "g": "b39815c0aef9d02e",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 880,
        "y": 720,
        "wires": [
            [
                "c47e2b8443325cfd"
            ]
        ]
    },
    {
        "id": "0b9dbd448b207cde",
        "type": "http in",
        "z": "12638c94c64653f3",
        "g": "08e96d47ded9c2f2",
        "name": "",
        "url": "/getInfoData",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 340,
        "wires": [
            [
                "6dd67c331fda82b6"
            ]
        ]
    },
    {
        "id": "6dd67c331fda82b6",
        "type": "function",
        "z": "12638c94c64653f3",
        "g": "08e96d47ded9c2f2",
        "name": "Query",
        "func": "// msg.topic = \"SELECT Temp_Machine FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\nmsg.topic = \"SELECT * FROM information  LIMIT 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 340,
        "wires": [
            [
                "f51a64beaac17f77"
            ]
        ]
    },
    {
        "id": "f51a64beaac17f77",
        "type": "mysql",
        "z": "12638c94c64653f3",
        "g": "08e96d47ded9c2f2",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 580,
        "y": 340,
        "wires": [
            [
                "4694e999e7859d61"
            ]
        ]
    },
    {
        "id": "4694e999e7859d61",
        "type": "http response",
        "z": "12638c94c64653f3",
        "g": "08e96d47ded9c2f2",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 340,
        "wires": []
    },
    {
        "id": "75c52cda45dfb969",
        "type": "function",
        "z": "12638c94c64653f3",
        "name": "Update Unit Status",
        "func": "var status = msg.payload\n\nvar data = {\n    \n    UnitStatus: status,\n    ID: 1\n};\n\n// Construct the SQL UPDATE query\nvar query = `UPDATE information SET\n             UnitStatus = '${data.UnitStatus}'\n             WHERE ID = '${data.ID}'`;\n\n// Send the SQL query to the MySQL node\nmsg.topic = query;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 840,
        "wires": [
            [
                "0bdff582212b9d15"
            ]
        ]
    },
    {
        "id": "14dea692c21e7503",
        "type": "inject",
        "z": "12638c94c64653f3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "ON",
        "payloadType": "str",
        "x": 170,
        "y": 800,
        "wires": [
            [
                "75c52cda45dfb969"
            ]
        ]
    },
    {
        "id": "0372c5f3e77f042c",
        "type": "http in",
        "z": "12638c94c64653f3",
        "name": "",
        "url": "/unitstatus",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 920,
        "wires": [
            [
                "6d6fcec79b0afee3"
            ]
        ]
    },
    {
        "id": "6d6fcec79b0afee3",
        "type": "debug",
        "z": "12638c94c64653f3",
        "name": "debug 49",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 920,
        "wires": []
    },
    {
        "id": "adf67cd97e33ce45",
        "type": "function",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "name": "UPDATE information SET UnitStatus",
        "func": "var value = msg.payload.value;\n// var query = `UPDATE unitstatus SET Stat = ${value}`;\n// Check the value and set the query accordingly\nvar query;\nif (value === 1) {\n    query = `UPDATE information SET UnitStatus = 'ON'`;\n} else {\n    query = `UPDATE information SET UnitStatus = 'OFF'`;\n}\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 620,
        "wires": [
            [
                "784018e13e7c3854",
                "76e681351b7ebfb1"
            ]
        ]
    },
    {
        "id": "d5f50e537010bec1",
        "type": "function",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 620,
        "wires": [
            [
                "adf67cd97e33ce45"
            ]
        ]
    },
    {
        "id": "35cb9bc2441860b6",
        "type": "http in",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "name": "",
        "url": "/setUnitStat",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 620,
        "wires": [
            [
                "d5f50e537010bec1"
            ]
        ]
    },
    {
        "id": "76e681351b7ebfb1",
        "type": "link out",
        "z": "12638c94c64653f3",
        "g": "03d26eaca8acd225",
        "name": "Interface",
        "mode": "link",
        "links": [
            "cad8d9fb0b3b7dab"
        ],
        "x": 885,
        "y": 620,
        "wires": []
    }
]