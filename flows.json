[
    {
        "id": "bca4771a12cb11e6",
        "type": "tab",
        "label": "System",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "57a8e6e09724ec39",
        "type": "tab",
        "label": "Local Interface",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e9b71a55.b25c68",
        "type": "subflow",
        "name": "Loops",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "9f7aa00f.d31ab"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 640,
                "y": 40,
                "wires": [
                    {
                        "id": "f2a7b456.1521f8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 460,
                "y": 220,
                "wires": [
                    {
                        "id": "6b0c2d4d.1d2934",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "ce6092360da2da00",
        "type": "group",
        "z": "57a8e6e09724ec39",
        "name": "Developer Debug",
        "style": {
            "label": true,
            "fill": "#e3f3d3"
        },
        "nodes": [
            "e1f5480776bb23d2",
            "679d1f1d321ffb54",
            "64b8533b0b2f03ad",
            "4b43c6dce1977e9c"
        ],
        "x": 54,
        "y": 59,
        "w": 792,
        "h": 82
    },
    {
        "id": "6b4d024ab7b25c4c",
        "type": "group",
        "z": "57a8e6e09724ec39",
        "name": "Get Data From MySQL",
        "style": {
            "label": true,
            "fill": "#bfdbef"
        },
        "nodes": [
            "537397df410d682a",
            "6a4a06a45fb80d04",
            "5b08597283a9c34f",
            "4dbe83f2e3ecf6f0",
            "04f4b623aa95ece0",
            "03eda52da48cfdbb",
            "b3cade89519d6d84",
            "62276a9f2eb4a7c4"
        ],
        "x": 54,
        "y": 179,
        "w": 792,
        "h": 142
    },
    {
        "id": "525e434a306529fc",
        "type": "group",
        "z": "57a8e6e09724ec39",
        "name": "Set Thermostats",
        "style": {
            "label": true,
            "fill": "#dbcbe7"
        },
        "nodes": [
            "3b27314051618ab0",
            "438b8b5fb2428a49",
            "3b7f62e540788fca",
            "f8431f71d42202f0",
            "58982a5216ccf1d1",
            "069d507abaacbd5a",
            "676bf34c056ee6d4",
            "391b6164f4fe416c",
            "c433113f1901e9f8",
            "a775b6857b7fe93a",
            "3636da8784705a68",
            "fb33186f80d938cb",
            "f5584635e347aee0",
            "9984221615af2d3c"
        ],
        "x": 54,
        "y": 359,
        "w": 1122,
        "h": 202
    },
    {
        "id": "f748addfc5106e47",
        "type": "group",
        "z": "57a8e6e09724ec39",
        "name": "Insert Database",
        "style": {
            "label": true,
            "fill": "#ffbfbf"
        },
        "nodes": [
            "7b7a09cf.1e6d24",
            "fde57690.944ea8",
            "810bb31b564b3d49",
            "801c75c13c587a80"
        ],
        "x": 54,
        "y": 619,
        "w": 1132,
        "h": 82
    },
    {
        "id": "cbbdeba1125ca19b",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Gateway",
        "style": {
            "label": true
        },
        "nodes": [
            "61569cd1264aebef",
            "1ec9c25db1122edf",
            "4c80d3fd31ff5440",
            "dd1e1bf4fa001f32"
        ],
        "x": 14,
        "y": 39,
        "w": 452,
        "h": 82
    },
    {
        "id": "1cbfcd06637d48ad",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "initiate",
        "style": {
            "label": true
        },
        "nodes": [
            "62a153d4d974c23e",
            "7a37686efd1c39c5",
            "4958a8f1dc7bf670",
            "a421582f2823dadb"
        ],
        "x": 724,
        "y": 39,
        "w": 662,
        "h": 82
    },
    {
        "id": "aadd16a462e83be5",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Execute SQL",
        "style": {
            "label": true
        },
        "nodes": [
            "ed77b13627de379d",
            "2b3434178f0ac999",
            "9d6f10db5c0fea06"
        ],
        "x": 484,
        "y": 39,
        "w": 222,
        "h": 82
    },
    {
        "id": "8be50af1826bf3eb",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "IncomingData",
        "style": {
            "label": true
        },
        "nodes": [
            "94514e5dd76e1b4a",
            "0cbc509033550b7f",
            "92b7c675366c9d8d",
            "f41842a72cb70323",
            "5b8d8dea5122397e",
            "83efeb6b5a73d7c6",
            "fb1bf2e163b3c7a9",
            "df5d05325874622c",
            "cbe77e3b5f568059",
            "f653f7df10385059",
            "91c1d36297a0c7fd",
            "f20849a9ab1503b2",
            "a647954ae4d429aa"
        ],
        "x": 24,
        "y": 359,
        "w": 1192,
        "h": 162
    },
    {
        "id": "3b8e5eb93b7526d7",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "rsjpharapankita",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "415d098faf23ad7c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e7691dfa6e339e7c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "DatabaseUtama",
        "name": "",
        "usetls": true,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "b9cc59e6.7e5e68",
        "type": "influxdb",
        "hostname": "localhost",
        "port": "8086",
        "protocol": "http",
        "database": "your_database",
        "name": "InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "9f7aa00f.d31ab",
        "type": "function",
        "z": "e9b71a55.b25c68",
        "name": "InitiateLoop",
        "func": "var data = msg.payload;\nvar limit = data.length;\nflow.set(\"data\",data);\nflow.set(\"limit\",limit);\nmsg.topic = \"0\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 40,
        "wires": [
            [
                "f2a7b456.1521f8"
            ]
        ]
    },
    {
        "id": "f2a7b456.1521f8",
        "type": "function",
        "z": "e9b71a55.b25c68",
        "name": "Loop",
        "func": "var data = flow.get(\"data\");\nvar count = parseInt(msg.topic);\nmsg.payload = data[count];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 40,
        "wires": [
            [
                "31bc9e4a.f0c962"
            ]
        ]
    },
    {
        "id": "26ad85dd.1a426a",
        "type": "link in",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "6e495066.b7de"
        ],
        "x": 215,
        "y": 80,
        "wires": [
            [
                "f2a7b456.1521f8"
            ]
        ]
    },
    {
        "id": "31bc9e4a.f0c962",
        "type": "link out",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "4642e834.27d108"
        ],
        "x": 395,
        "y": 80,
        "wires": []
    },
    {
        "id": "6e495066.b7de",
        "type": "link out",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "26ad85dd.1a426a"
        ],
        "x": 615,
        "y": 180,
        "wires": []
    },
    {
        "id": "4642e834.27d108",
        "type": "link in",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "31bc9e4a.f0c962"
        ],
        "x": 95,
        "y": 180,
        "wires": [
            [
                "db2b7400.81c1e8"
            ]
        ]
    },
    {
        "id": "db2b7400.81c1e8",
        "type": "function",
        "z": "e9b71a55.b25c68",
        "name": "Increment",
        "func": "var limit = flow.get(\"limit\");\nvar count = parseInt(msg.topic);\ncount++;\nif(count>=limit){\n    msg.payload = null;\n}\nmsg.topic = String(count);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 200,
        "y": 180,
        "wires": [
            [
                "6b0c2d4d.1d2934"
            ]
        ]
    },
    {
        "id": "6b0c2d4d.1d2934",
        "type": "switch",
        "z": "e9b71a55.b25c68",
        "name": "Continue?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 180,
        "wires": [
            [
                "f20c27b7.bee1c8"
            ],
            []
        ]
    },
    {
        "id": "f20c27b7.bee1c8",
        "type": "delay",
        "z": "e9b71a55.b25c68",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 500,
        "y": 180,
        "wires": [
            [
                "6e495066.b7de"
            ]
        ]
    },
    {
        "id": "61569cd1264aebef",
        "type": "mqtt in",
        "z": "bca4771a12cb11e6",
        "g": "cbbdeba1125ca19b",
        "name": "",
        "topic": "iota238/data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "415d098faf23ad7c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 80,
        "wires": [
            [
                "4c80d3fd31ff5440",
                "2815e1177e773fe4"
            ]
        ]
    },
    {
        "id": "1ec9c25db1122edf",
        "type": "mqtt out",
        "z": "bca4771a12cb11e6",
        "g": "cbbdeba1125ca19b",
        "name": "",
        "topic": "iota238/cmd",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "415d098faf23ad7c",
        "x": 370,
        "y": 80,
        "wires": []
    },
    {
        "id": "4c80d3fd31ff5440",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "cbbdeba1125ca19b",
        "name": "IncomingData",
        "mode": "link",
        "links": [
            "0cbc509033550b7f"
        ],
        "x": 215,
        "y": 80,
        "wires": []
    },
    {
        "id": "0cbc509033550b7f",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": "link in 1",
        "links": [
            "4c80d3fd31ff5440"
        ],
        "x": 65,
        "y": 420,
        "wires": [
            [
                "94514e5dd76e1b4a"
            ]
        ]
    },
    {
        "id": "ed77b13627de379d",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "g": "aadd16a462e83be5",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 610,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "5b8d8dea5122397e",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": "(networkID)",
        "property": "networkid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "04",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "04",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 420,
        "wires": [
            [
                "83efeb6b5a73d7c6"
            ],
            [
                "fb1bf2e163b3c7a9"
            ]
        ]
    },
    {
        "id": "83efeb6b5a73d7c6",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": "Parse",
        "func": "msg.deviceinfo = msg.payload[0];\nvar data = msg.realdata;\nvar numBytes = data.length / 2;\nvar byteArray = new Uint8Array(numBytes);\nfor (var i=0; i<numBytes; i++) {\n    byteArray[i] = parseInt(data.substr(i*2, 2), 16);\n}\nvar len = byteArray[3];\nvar byteData = new Uint8Array(len);\nfor (i=0; i<len; i++) {\n    byteData[i] = byteArray[i+4];\n}\nmsg.payload = byteData;\nmsg.data = data.substr(0,6);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 400,
        "wires": [
            [
                "df5d05325874622c"
            ]
        ]
    },
    {
        "id": "df5d05325874622c",
        "type": "cayennelpp-decoder",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": "decoder",
        "x": 840,
        "y": 400,
        "wires": [
            [
                "91c1d36297a0c7fd"
            ]
        ]
    },
    {
        "id": "91c1d36297a0c7fd",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": " Build",
        "func": "var data = msg.payload;\ndata.networkid = msg.data.substring(0,2);\ndata.devid = msg.data.substring(2,4);\ndata.typeid = msg.data.substring(4,6);\ndata.epoch = (Date.now());\nmsg.payload = data;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 400,
        "wires": [
            [
                "f20849a9ab1503b2"
            ]
        ]
    },
    {
        "id": "f41842a72cb70323",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": " Listed?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 420,
        "y": 420,
        "wires": [
            [
                "5b8d8dea5122397e"
            ]
        ]
    },
    {
        "id": "94514e5dd76e1b4a",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": "Check ID",
        "func": "msg.realdata = msg.payload;\nvar networkid = msg.payload.substring(0,2);\nvar devid = msg.payload.substring(2,4);\nvar typeid = msg.payload.substring(4,6);\nmsg.topic = \"SELECT * from `devicelist` WHERE \";\nmsg.topic += \"`networkid` = '\"+networkid+\"' AND \";\nmsg.topic += \"`devid` = '\" + devid +\"' AND \";\nmsg.topic += \"`typeid` = '\" + typeid +\"';\";\nmsg.networkid = msg.realdata.substring(0,2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 420,
        "wires": [
            [
                "92b7c675366c9d8d"
            ]
        ]
    },
    {
        "id": "09cadf8846fbce47",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "Pressure",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 380,
        "y": 160,
        "wires": [
            [
                "5f9f6b38940d4cbc"
            ]
        ]
    },
    {
        "id": "5f9f6b38940d4cbc",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "Pressure",
        "func": "msg.payload = { temperature_1 : 27.3, barometric_pressure_1 : 1.6, networkid : \"02\", devid : \"03\", typeid : \"02\", epo:1 }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 160,
        "wires": [
            [
                "797d03be49f87377"
            ]
        ]
    },
    {
        "id": "a489b477160810b5",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "Temp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 390,
        "y": 180,
        "wires": [
            [
                "dde053031226823c"
            ]
        ]
    },
    {
        "id": "dde053031226823c",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "Temp",
        "func": "msg.payload = {\ntemperature_1: 27,\nrelative_humidity_1:60,\nbarometric_pressure_1: -913.7,\nnetworkid: \"03\",\ndevid : \"05\",\ntypeid : \"03\",\nepo:2\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 200,
        "wires": [
            [
                "797d03be49f87377"
            ]
        ]
    },
    {
        "id": "f20849a9ab1503b2",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": "Query",
        "func": "var d = msg.deviceinfo;\nmsg.topic = \"UPDATE `monitoringdata` SET \";\nif(d.keterangan.split(\",\")[0] == \"Temp/RH\"){\n    if(d.keterangan.split(\",\")[1] == \"CathLab\"){\n        msg.topic += \"`Temp_Cathlab` = \"+String(msg.payload.temperature_1)+\",\";\n        msg.topic += \"`RH_Cathlab` = \"+String(msg.payload.relative_humidity_1)+\";\";\n        flow.set(\"Temp_Cathlab\",[msg.payload.temperature_1,Date.now()]);\n        flow.set(\"RH_Cathlab\", [msg.payload.relative_humidity_1,Date.now()]);\n    } else if (d.keterangan.split(\",\")[1] == \"Machine\"){\n        msg.topic += \"`Temp_Machine` = \" + String(msg.payload.temperature_1) + \",\";\n        msg.topic += \"`RH_Machine` = \" + String(msg.payload.relative_humidity_1) + \";\";\n        flow.set(\"Temp_Machine\", [msg.payload.temperature_1,Date.now()]);\n        flow.set(\"RH_Machine\", [msg.payload.relative_humidity_1,Date.now()]);\n    }\n} else if (d.keterangan.split(\",\")[0] == \"Pressure\"){\n    if (d.keterangan.split(\",\")[1] == \"MediumFilter\") {\n        msg.topic += \"`Pre_Filter` = \" + String(msg.payload.barometric_pressure_1) + \";\";\n        flow.set(\"Pre_Filter\", [msg.payload.barometric_pressure_1,Date.now()]);\n    } else if (d.keterangan.split(\",\")[1] == \"HepaFilter\") {\n        msg.topic += \"`HEPA_Filter` = \" + String(msg.payload.barometric_pressure_1) + \";\";\n        flow.set(\"HEPA_Filter\", [msg.payload.barometric_pressure_1,Date.now()]);\n    }\n}\n\nmsg.topic += \"INSERT INTO `recorddevice`(`epoch`, `networkid`, `devid`, `typeid`, `temp`, `val`) VALUES (\";\nmsg.topic += String(msg.payload.epoch)+\",\";\nmsg.topic += \"'\" + String(msg.payload.networkid) + \"',\";\nmsg.topic += \"'\" + String(msg.payload.devid) + \"',\";\nmsg.topic += \"'\" + String(msg.payload.typeid) + \"',\";\nmsg.topic += String(msg.payload.temperature_1) + \",\";\nif(msg.payload.networkid == \"02\"){\n    msg.topic += String(msg.payload.barometric_pressure_1);\n}else if(msg.payload.networkid == \"03\"){\n    msg.topic += String(msg.payload.relative_humidity_1);\n}\nmsg.topic += \");\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 400,
        "wires": [
            [
                "a647954ae4d429aa"
            ]
        ]
    },
    {
        "id": "a647954ae4d429aa",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "2b3434178f0ac999",
            "9b0d96a526b14c55"
        ],
        "x": 1175,
        "y": 400,
        "wires": []
    },
    {
        "id": "2b3434178f0ac999",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "aadd16a462e83be5",
        "name": "link in 2",
        "links": [
            "a647954ae4d429aa",
            "f653f7df10385059",
            "4c17409ddbc782a5",
            "3fae4a69287e8867",
            "983c5238c51828dc"
        ],
        "x": 525,
        "y": 80,
        "wires": [
            [
                "ed77b13627de379d",
                "9d6f10db5c0fea06"
            ]
        ]
    },
    {
        "id": "dd1e1bf4fa001f32",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "cbbdeba1125ca19b",
        "name": "OutData",
        "links": [
            "b7a0b469689fefd3",
            "618781567775cb33",
            "300675ed5fd9466c",
            "022a029521e3c1dd",
            "fe15437ea5ba0d90",
            "fcded8e6800db872",
            "bf104e7cca1d96a0"
        ],
        "x": 265,
        "y": 80,
        "wires": [
            [
                "1ec9c25db1122edf",
                "31ef301a128c4b66"
            ]
        ]
    },
    {
        "id": "92b7c675366c9d8d",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 290,
        "y": 420,
        "wires": [
            [
                "f41842a72cb70323"
            ]
        ]
    },
    {
        "id": "fd65d131d5f88239",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "RH_Cathlab",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0303030B0167010E0168780173DC4F97",
        "payloadType": "str",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "4c80d3fd31ff5440"
            ]
        ]
    },
    {
        "id": "797d03be49f87377",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 41",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 160,
        "wires": []
    },
    {
        "id": "7a37686efd1c39c5",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "g": "1cbfcd06637d48ad",
        "name": "  ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "select * from monitoringdata;select * from Input Order by Number ASC;select * from Output Order by Number ASC;",
        "payload": "",
        "payloadType": "date",
        "x": 820,
        "y": 80,
        "wires": [
            [
                "4958a8f1dc7bf670"
            ]
        ]
    },
    {
        "id": "4958a8f1dc7bf670",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "g": "1cbfcd06637d48ad",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 940,
        "y": 80,
        "wires": [
            [
                "a421582f2823dadb",
                "89aad2163aa4df8c"
            ]
        ]
    },
    {
        "id": "a421582f2823dadb",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "1cbfcd06637d48ad",
        "name": "Init Global Variable",
        "func": "var json = {};\nflow.set(\"InitTime\",Date.now());\nflow.set(\"RelayInput\",msg.payload[1]);\nflow.set(\"RelayOutput\",msg.payload[2]);\nfor (let index = 0; index < Object.keys(msg.payload[0][0]).length ; index++) {\n    flow.set(Object.keys(msg.payload[0][0])[index],msg.payload[0][0][Object.keys(msg.payload[0][0])[index]]) \n    json[String(Object.keys(msg.payload[0][0])[index])] = flow.get(Object.keys(msg.payload[0][0])[index]);  \n}\njson[\"Timestamp\"] = toEpochTimeInSeconds(json.Timestamp);\nmsg.payload = [json,msg.payload[1],msg.payload[2]];\nreturn msg;\n\nfunction toEpochTimeInSeconds(dateString) {\n    return Math.floor(new Date(dateString).getTime());\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 80,
        "wires": [
            [
                "62a153d4d974c23e"
            ]
        ]
    },
    {
        "id": "62a153d4d974c23e",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "1cbfcd06637d48ad",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1280,
        "y": 80,
        "wires": []
    },
    {
        "id": "fb1bf2e163b3c7a9",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": " Relay",
        "func": "msg.deviceinfo = msg.payload[0];\nmsg.topic = \"\";\nif(msg.deviceinfo.keterangan == \"RelayInput\"){\n    var RelayInput = flow.get(\"RelayInput\");\n    msg.deviceinfo[\"InputVal\"] = hexToBinary(msg.realdata.substring(8,10));\n    if(msg.deviceinfo.InputVal == \"11111111\"){\n        RelayInput[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayInput.length; index++) {\n            RelayInput[index][\"Stat\"] = 0;\n        }\n        msg.topic += \"UPDATE `Input` SET `Stat` = 0;\";\n    }else{\n        RelayInput[0][\"Stat\"] = 0;\n        for (let index = 0; index < msg.deviceinfo.InputVal.length; index++) {\n            if(msg.deviceinfo.InputVal[index] == \"0\"){\n                msg.topic += \"UPDATE `Input` SET `Stat` = 1 WHERE `Number` = \"+String(index+1)+\";\";\n                RelayInput[index+1][\"Stat\"] = 1;\n            }else if(msg.deviceinfo.InputVal[index] == \"1\"){\n                msg.topic += \"UPDATE `Input` SET `Stat` = 0 WHERE `Number` = \"+String(index+1)+\";\";\n                RelayInput[index+1][\"Stat\"] = 0;\n            }\n        }\n    }\n    flow.set(\"RelayInput\", RelayInput);\n}else if(msg.deviceinfo.keterangan == \"RelayOutput\"){\n    var RelayOutput = flow.get(\"RelayOutput\");\n    msg.deviceinfo[\"OutputVal\"] = decimalToReversedBinary(parseInt(msg.realdata.substring(8,10)));\n    if (msg.deviceinfo.OutputVal == \"00000000\"){\n        RelayOutput[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayOutput.length; index++) {\n            RelayOutput[index][\"Stat\"] = 0;\n        }\n        msg.topic += \"UPDATE `Output` SET `Stat` = 0;\";\n    }else{\n        RelayOutput[0][\"Stat\"] = 0;\n        for (let index = 0; index < msg.deviceinfo.OutputVal.length; index++) {\n            if(msg.deviceinfo.OutputVal[index] == \"0\"){\n                msg.topic += \"UPDATE `Output` SET `Stat` = 0 WHERE `Number` = \"+String(index+1)+\";\";\n                RelayOutput[index+1][\"Stat\"] = 0;\n            }else if(msg.deviceinfo.OutputVal[index] == \"1\"){\n                msg.topic += \"UPDATE `Output` SET `Stat` = 1 WHERE `Number` = \"+String(index+1)+\";\";\n                RelayOutput[index+1][\"Stat\"] = 1;\n            }\n        }\n    }\n    msg.topic += \"UPDATE `Operation` SET `Output` = \"+String(msg.realdata.substring(8,10))+\";\";\n    flow.set(\"RelayOutput\", RelayOutput);\n}\nreturn msg;\n\nfunction hexToBinary(hexString) {\n    // Parse the hexadecimal string to an integer\n    const intValue = parseInt(hexString, 16);\n\n    // Convert the integer to a binary string\n    let binaryString = intValue.toString(2);\n\n    // Pad the binary string with leading zeros if necessary\n    // Assuming each hex digit should be represented by 4 binary digits\n    const hexLength = hexString.length;\n    const expectedBinaryLength = hexLength * 4;\n    while (binaryString.length < expectedBinaryLength) {\n        binaryString = '0'.concat(binaryString);\n    }\n\n    return binaryString;\n}\n\nfunction decimalToReversedBinary(decimal) {\n    // Convert the decimal number to a binary string\n    let binaryString = decimal.toString(2);\n\n    // Pad the binary string with leading zeros to ensure it has a length of 4 bits\n    while (binaryString.length < 4) {\n        binaryString = '0'.concat(binaryString);\n    }\n\n    // Reverse the binary string\n    const reversedBinaryString = binaryString.split('').reverse().join('');\n\n    return reversedBinaryString;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 440,
        "wires": [
            [
                "cbe77e3b5f568059",
                "f653f7df10385059"
            ]
        ]
    },
    {
        "id": "254b9d7070f0e133",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "RelayInputChannel3",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04030000DF",
        "payloadType": "str",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "4c80d3fd31ff5440"
            ]
        ]
    },
    {
        "id": "cbe77e3b5f568059",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": "debug 45",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 840,
        "y": 440,
        "wires": []
    },
    {
        "id": "89aad2163aa4df8c",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 47",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 160,
        "wires": []
    },
    {
        "id": "4b38f87de902f1bd",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "RequestTemp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1120,
        "wires": [
            [
                "624c82fc1ad9708f"
            ]
        ]
    },
    {
        "id": "624c82fc1ad9708f",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "func": "// Definisikan parameter PID\nconst Kp = 0.5; // Gain proporsional\nconst Ki = 0.2; // Gain integral\nconst Kd = 0.1; // Gain derivatif\n\nlet errorPrev = 0;\nlet integral = 0;\n\n// Fungsi untuk mengatur heater dengan kontrol PID\nfunction kontrolPID(nilaiTarget, nilaiSekarang) {\n    // Hitung error saat ini\n    const error = nilaiTarget - nilaiSekarang;\n\n    // Hitung komponen PID\n    const proporsional = Kp * error;\n    integral += error;\n    const integralComp = Ki * integral;\n    const derivative = Kd * (error - errorPrev);\n\n    // Hitung output PID\n    const output = proporsional + integralComp + derivative;\n\n    // Simpan error saat ini untuk penggunaan di iterasi selanjutnya\n    errorPrev = error;\n\n    return output;\n}\n\n// Contoh penggunaan kontrol PID untuk mengatur heater\nconst nilaiTarget = 55; // Nilai RH yang diinginkan\nlet nilaiSekarang = 60; // Nilai RH awal\n\n// Iterasi simulasi kontrol PID\nfor (let i = 0; i < 10; i++) {\n    const outputPID = kontrolPID(nilaiTarget, nilaiSekarang);\n    nilaiSekarang += outputPID; // Asumsi nilai outputPID adalah perubahan dalam nilai RH\n    console.log(\"Output PID:\", outputPID);\n    console.log(\"Nilai RH saat ini:\", nilaiSekarang);\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1120,
        "wires": [
            []
        ]
    },
    {
        "id": "c09b7f80e5ac0a0c",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 48",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 1120,
        "wires": []
    },
    {
        "id": "f653f7df10385059",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "8be50af1826bf3eb",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "2b3434178f0ac999",
            "9b0d96a526b14c55"
        ],
        "x": 795,
        "y": 480,
        "wires": []
    },
    {
        "id": "cc64b14b4d983e3f",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 90,
        "y": 580,
        "wires": [
            [
                "fa3bcb095fdfb9a7",
                "b07e4e6ebad074fb"
            ]
        ]
    },
    {
        "id": "fa3bcb095fdfb9a7",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " Check",
        "func": "var RelayInput = flow.get(\"RelayInput\");\nvar RelayOutput = flow.get(\"RelayOutput\");\nvar RunningTime = secondsToHumanReadable(Math.round((Date.now()-flow.get(\"InitTime\"))/1000));\nfor (let index = 0; index < RelayInput.length; index++) {\n    if(RelayInput[index].keterangan == \"StatusIndoor\" && RelayInput[index].Stat == 1){\n        msg[\"StatusIndoor\"] = true;\n        msg.payload = \"O-RUN-O(\"+String(RunningTime)+\")\";\n        return msg;\n    }else if(RelayInput[index].keterangan == \"StatusIndoor\" && RelayInput[index].Stat == 0){\n        msg[\"StatusIndoor\"] = false;\n        flow.set(\"cmdauto\",\"None\");\n    }\n}\nmsg.payload = \"-IDLE- (\"+String(RunningTime)+\")\";\nreturn msg;\n\nfunction secondsToHumanReadable(seconds) {\n    const units = [\n        { label: 'year', value: 60 * 60 * 24 * 365 },  // Approximate, not accounting for leap years\n        { label: 'month', value: 60 * 60 * 24 * 30 },  // Approximate\n        { label: 'day', value: 60 * 60 * 24 },\n        { label: 'hour', value: 60 * 60 },\n        { label: 'minute', value: 60 },\n        { label: 'second', value: 1 }\n    ];\n\n    const result = [];\n\n    for (const unit of units) {\n        const unitValue = Math.floor(seconds / unit.value);\n        if (unitValue > 0) {\n            result.push(`${unitValue} ${unit.label}${unitValue > 1 ? 's' : ''}`);\n            seconds -= unitValue * unit.value;\n        }\n    }\n\n    return result.length > 0 ? result.join(' ') : '0 seconds';\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 580,
        "wires": [
            [
                "ae03f26ebfda2cf1",
                "6b0dbecee3dd961c"
            ]
        ]
    },
    {
        "id": "6b0dbecee3dd961c",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 350,
        "y": 620,
        "wires": []
    },
    {
        "id": "ae03f26ebfda2cf1",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "property": "StatusIndoor",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 580,
        "wires": [
            [
                "53ef936abb21b675"
            ],
            [
                "962ac3a3ae6cb677"
            ]
        ]
    },
    {
        "id": "aae7882546c43088",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "RelayInputAllOff",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04030000FF",
        "payloadType": "str",
        "x": 120,
        "y": 240,
        "wires": [
            [
                "4c80d3fd31ff5440"
            ]
        ]
    },
    {
        "id": "53ef936abb21b675",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "0",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 470,
        "y": 560,
        "wires": [
            [
                "eeaad9e4a7b40fec"
            ]
        ]
    },
    {
        "id": "ba8c9cc35b114ccc",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 750,
        "y": 560,
        "wires": []
    },
    {
        "id": "962ac3a3ae6cb677",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "func": "msg.reset = true;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 600,
        "wires": [
            [
                "e824b89db0dcadfc"
            ]
        ]
    },
    {
        "id": "e824b89db0dcadfc",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "name": "link out 4",
        "mode": "link",
        "links": [
            "5c0e450f5d574f30"
        ],
        "x": 565,
        "y": 600,
        "wires": []
    },
    {
        "id": "5c0e450f5d574f30",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "name": "link in 4",
        "links": [
            "e824b89db0dcadfc"
        ],
        "x": 385,
        "y": 540,
        "wires": [
            [
                "53ef936abb21b675"
            ]
        ]
    },
    {
        "id": "c3f008a339c97a2e",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "name": "link out 5",
        "mode": "link",
        "links": [
            "98d4b79922df7538"
        ],
        "x": 675,
        "y": 560,
        "wires": []
    },
    {
        "id": "98d4b79922df7538",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "name": "link in 5",
        "links": [
            "c3f008a339c97a2e"
        ],
        "x": 55,
        "y": 760,
        "wires": [
            [
                "5dfb8dd8c390d971"
            ]
        ]
    },
    {
        "id": "5dfb8dd8c390d971",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "func": "msg.cmd = flow.get(\"cmdauto\");\nvar BatasAtasRH = 58;\nvar BatasBawahRH = 52;\nvar RelayInput = flow.get(\"RelayInput\");\nvar RelayOutput = flow.get(\"RelayOutput\");\n//----------------------------------------------------\n// Definisikan parameter PID\nvar Kp = 0.5; // Gain proporsional\nvar Ki = 0.2; // Gain integral\nvar Kd = 0.1; // Gain derivatif\nvar SetPoint = 40;\n\nvar errorPrev = 0;\nvar integral = 0;\n//----------------------------------------------------\nif(msg.cmd == \"Init\"){\n    msg.cmd = \"MonitorTemp\";\n}else if(msg.cmd == \"MonitorTemp\"){\n    if ((Date.now() - flow.get(\"Temp_Cathlab\")[1]) / 1000 < 10 && (Date.now() - flow.get(\"RH_Cathlab\")[1])/1000<10){\n        var RH_Cathlab = flow.get(\"RH_Cathlab\")[0];\n        if (RH_Cathlab >= (SetPoint + 1)) {\n            var dur = kontrolPID(SetPoint,RH_Cathlab)*(-1)*60*1000;\n            if(dur<0){\n                return msg;\n            }\n            flow.set(\"DurationEH\",[Math.round(dur),Date.now()]);\n            msg.cmd = \"OnEH\"+\" =[EH1]\";\n            console.log(String(dur));\n        }\n    }\n}else if(msg.cmd == \"OnEH\"+\" =[EH1]\"){\n    for (let index = 0; index < RelayOutput.length; index++) {\n        if(RelayOutput[index].keterangan == \"EH1\" && RelayOutput[index].Stat == 1){\n            msg.cmd = \"Waiting\";\n            msg.delay = flow.get(\"DurationEH\")[0];\n        }\n    }\n} else if (msg.cmd == \"Waiting Force Done\"){\n    msg.cmd = \"MonitorTemp\";\n} else if(msg.cmd.substring(0,7) == \"Waiting\"){\n    var timeRemaining = Math.round(((flow.get(\"DurationEH\")[0]+flow.get(\"DurationEH\")[1])-Date.now())/1000);\n    msg.cmd = \"Waiting = \"+String(epochtostr(timeRemaining));\n    \n    var RH_Cathlab = flow.get(\"RH_Cathlab\")[0];\n    if (RH_Cathlab < (SetPoint+1)){\n        msg.cmd = \"Waiting Force Done\";\n        msg.reset = true;\n    }\n    console.log(\"Timeremaining : \"+String(timeRemaining));\n    console.log(\"DurationEH : \"+String((Math.round((flow.get(\"DurationEH\")[0])/1000)/2)));\n    if(timeRemaining <= (Math.round((flow.get(\"DurationEH\")[0])/1000)/2)){\n        for (let index = 0; index < RelayOutput.length; index++) {\n            if(RelayOutput[index].keterangan == \"EH2\" && RelayOutput[index].Stat == 0){\n                msg.cmd += \" =[EH2]\";\n            }\n        }\n    }\n} else if(msg.cmd == \"Timeout\"){\n    var RH_Cathlab = flow.get(\"RH_Cathlab\")[0];\n    msg.cmd = \"OffEH\";\n} else if(msg.cmd == \"OffEH\"){\n    msg.statusEH1 = false;\n    msg.statusEH2 = false;\n    for (let index = 0; index < RelayOutput.length; index++) {\n        if(RelayOutput[index].keterangan == \"EH1\" && RelayOutput[index].Stat == 0){\n            msg.statusEH1 = true;\n        }else if(RelayOutput[index].keterangan == \"EH2\" && RelayOutput[index].Stat == 0){\n            msg.statusEH2 = true;\n        }\n    }\n    if(msg.statusEH1&&msg.statusEH2){\n        msg.cmd = \"MonitorTemp\";\n    }\n}\nflow.set(\"cmdauto\", msg.cmd);\nreturn msg;\n\nfunction kontrolPID(nilaiTarget, nilaiSekarang) {\n    // Hitung error saat ini\n    const error = nilaiTarget - nilaiSekarang;\n\n    // Hitung komponen PID\n    const proporsional = Kp * error;\n    integral += error;\n    const integralComp = Ki * integral;\n    const derivative = Kd * (error - errorPrev);\n\n    // Hitung output PID\n    const output = proporsional + integralComp + derivative;\n\n    // Simpan error saat ini untuk penggunaan di iterasi selanjutnya\n    errorPrev = error;\n\n    return output;\n}\nfunction epochtostr(seconds) {\n    const units = [\n        { label: 'year', value: 60 * 60 * 24 * 365 },  // Approximate, not accounting for leap years\n        { label: 'month', value: 60 * 60 * 24 * 30 },  // Approximate\n        { label: 'day', value: 60 * 60 * 24 },\n        { label: 'hour', value: 60 * 60 },\n        { label: 'minute', value: 60 },\n        { label: 'second', value: 1 }\n    ];\n\n    const result = [];\n\n    for (const unit of units) {\n        const unitValue = Math.floor(seconds / unit.value);\n        if (unitValue > 0) {\n            result.push(`${unitValue} ${unit.label}${unitValue > 1 ? 's' : ''}`);\n            seconds -= unitValue * unit.value;\n        }\n    }\n\n    return result.length > 0 ? result.join(' ') : '0 seconds';\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 760,
        "wires": [
            [
                "6c88cbac6c1e1314",
                "c7d1752efe372b78",
                "53fcd0a658899b61",
                "f76630c041b6c74a"
            ]
        ]
    },
    {
        "id": "996b8741f6785be0",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "name": "link in 6",
        "links": [
            "340b6dc447cb3a1f"
        ],
        "x": 105,
        "y": 720,
        "wires": [
            [
                "5dfb8dd8c390d971"
            ]
        ]
    },
    {
        "id": "6c88cbac6c1e1314",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "name": "link out 6",
        "mode": "link",
        "links": [
            "26120895f3f84739"
        ],
        "x": 295,
        "y": 720,
        "wires": []
    },
    {
        "id": "26120895f3f84739",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "name": "link in 7",
        "links": [
            "6c88cbac6c1e1314"
        ],
        "x": 55,
        "y": 680,
        "wires": [
            [
                "32dded3e3ceacf4c"
            ]
        ]
    },
    {
        "id": "340b6dc447cb3a1f",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "name": "link out 7",
        "mode": "link",
        "links": [
            "996b8741f6785be0"
        ],
        "x": 365,
        "y": 680,
        "wires": []
    },
    {
        "id": "811d40e949e9fef1",
        "type": "delay",
        "z": "bca4771a12cb11e6",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 270,
        "y": 680,
        "wires": [
            [
                "340b6dc447cb3a1f"
            ]
        ]
    },
    {
        "id": "c7d1752efe372b78",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 450,
        "y": 760,
        "wires": [
            []
        ]
    },
    {
        "id": "14f91a50d6904e88",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "Request Temp",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'Temp/RH,CathLab';\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 800,
        "wires": [
            [
                "b1b2db7babdaf54b"
            ]
        ]
    },
    {
        "id": "f76630c041b6c74a",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "property": "cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "MonitorTemp",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "=[EH",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Waiting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OffEH",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 330,
        "y": 840,
        "wires": [
            [
                "8f99e09dae854b85"
            ],
            [
                "ede82a4075db7adf"
            ],
            [
                "aa65a38826eefec0",
                "5325683f3d621a49"
            ],
            [
                "dae22984db30bba3"
            ]
        ]
    },
    {
        "id": "8f99e09dae854b85",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "15",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 450,
        "y": 800,
        "wires": [
            [
                "14f91a50d6904e88"
            ]
        ]
    },
    {
        "id": "765b5c52fe3e866b",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "Wait",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1180,
        "wires": [
            [
                "6173c03eee9cbf78"
            ]
        ]
    },
    {
        "id": "6173c03eee9cbf78",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "func": "msg.payload = flow.get(\"RelayOutput\");\n\nreturn msg;\n\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 1180,
        "wires": [
            [
                "5bdb2b04bcd78a1f"
            ]
        ]
    },
    {
        "id": "5bdb2b04bcd78a1f",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 49",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 1180,
        "wires": []
    },
    {
        "id": "b1b2db7babdaf54b",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 750,
        "y": 800,
        "wires": [
            [
                "3ac72ba11294aa01"
            ]
        ]
    },
    {
        "id": "3ac72ba11294aa01",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "Requesting",
        "func": "var d = msg.payload[0];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"00\";\ncmd += \"00000000\";\nmsg.payload = cmd;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 800,
        "wires": [
            [
                "022a029521e3c1dd"
            ]
        ]
    },
    {
        "id": "b7a0b469689fefd3",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "name": "link out 8",
        "mode": "link",
        "links": [
            "dd1e1bf4fa001f32"
        ],
        "x": 1075,
        "y": 840,
        "wires": []
    },
    {
        "id": "eeaad9e4a7b40fec",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "func": "flow.set(\"cmdauto\",\"Init\");\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 560,
        "wires": [
            [
                "ba8c9cc35b114ccc",
                "c3f008a339c97a2e"
            ]
        ]
    },
    {
        "id": "b07e4e6ebad074fb",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "name": "link out 9",
        "mode": "link",
        "links": [
            "694bf36843b2868e"
        ],
        "x": 175,
        "y": 540,
        "wires": []
    },
    {
        "id": "694bf36843b2868e",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "name": "link in 8",
        "links": [
            "b07e4e6ebad074fb"
        ],
        "x": 885,
        "y": 580,
        "wires": [
            [
                "40a624a1f8f16c78",
                "0394ccbdad96488f"
            ]
        ]
    },
    {
        "id": "40a624a1f8f16c78",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "func": "var d = [];\nd.push(flow.get(\"Temp_Cathlab\"));\nd.push(flow.get(\"RH_Cathlab\"));\nd.push(flow.get(\"Temp_Machine\"));\nd.push(flow.get(\"RH_Machine\"));\nd.push(flow.get(\"Pre_Filter\"));\nd.push(flow.get(\"HEPA_Filter\"));\nd.push(flow.get(\"DurationEH\"));\nd.push(flow.get(\"RelayInput\"));\nd.push(flow.get(\"RelayOutput\"));\nmsg.payload = d;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 580,
        "wires": [
            [
                "eaea2c3e22a96a9f",
                "042300e6b0e72670",
                "c4f972fcf9162c5b",
                "7ea2e7c17a42eba4",
                "a37180a17c8d6d8e",
                "510cccceaeed9bec",
                "12622275c3de0746",
                "d6aa40b162d6b292"
            ]
        ]
    },
    {
        "id": "eaea2c3e22a96a9f",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": " TempCathLab",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[0]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1180,
        "y": 560,
        "wires": []
    },
    {
        "id": "a37180a17c8d6d8e",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "RHCathLab",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[1]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1170,
        "y": 600,
        "wires": []
    },
    {
        "id": "510cccceaeed9bec",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": " TempMachine",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[2]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1180,
        "y": 640,
        "wires": []
    },
    {
        "id": "7ea2e7c17a42eba4",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "RHMachine",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[3]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1170,
        "y": 680,
        "wires": []
    },
    {
        "id": "c4f972fcf9162c5b",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": " Pre_Filter",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[4]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1160,
        "y": 720,
        "wires": []
    },
    {
        "id": "042300e6b0e72670",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": " HEPA_Filter",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[5]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1170,
        "y": 760,
        "wires": []
    },
    {
        "id": "32dded3e3ceacf4c",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "property": "cmd",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "None",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 140,
        "y": 680,
        "wires": [
            [
                "811d40e949e9fef1"
            ]
        ]
    },
    {
        "id": "53fcd0a658899b61",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "cmd",
        "targetType": "msg",
        "statusVal": "cmd",
        "statusType": "auto",
        "x": 330,
        "y": 720,
        "wires": []
    },
    {
        "id": "0394ccbdad96488f",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "op1": "",
        "op2": "",
        "op1type": "nul",
        "op2type": "nul",
        "duration": "250",
        "extend": false,
        "overrideDelay": false,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 970,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "618781567775cb33",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "name": "link out 10",
        "mode": "link",
        "links": [
            "dd1e1bf4fa001f32"
        ],
        "x": 565,
        "y": 1420,
        "wires": []
    },
    {
        "id": "e891fec5ffdf34ff",
        "type": "mqtt in",
        "z": "bca4771a12cb11e6",
        "d": true,
        "name": "",
        "topic": "iota238/#",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "415d098faf23ad7c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 660,
        "y": 200,
        "wires": [
            [
                "3a635d2fd0debdf4",
                "e8850da42b358071"
            ]
        ]
    },
    {
        "id": "9e9e4bbb0c14950b",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 51",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1200,
        "y": 220,
        "wires": []
    },
    {
        "id": "ede82a4075db7adf",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "15",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 450,
        "y": 860,
        "wires": [
            [
                "db7e71f59821125d"
            ]
        ]
    },
    {
        "id": "db7e71f59821125d",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "Turn On EH",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayOutput';\";\nmsg.topic += \"SELECT * FROM `Output` WHERE `keterangan` = 'EH1' OR `keterangan` = 'EH2';\";\nmsg.topic += \"SELECT * FROM `Operation`;\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 860,
        "wires": [
            [
                "89f81b486a2b2f8d"
            ]
        ]
    },
    {
        "id": "89f81b486a2b2f8d",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 750,
        "y": 860,
        "wires": [
            [
                "4776d2059a76e625"
            ]
        ]
    },
    {
        "id": "4776d2059a76e625",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " On1",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length - 2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\n\nvar binarycurrent = reverseString(decToBinary(msg.payload[2][0].Output));\n// console.log(\"Bin : \"+binarycurrent);\nif (binarycurrent[msg.payload[1][0].Number - 1] == \"0\" && msg.cmd.includes(\"=[EH1]\")) {\n    // console.log(binarycurrent);\n    var spt = binarycurrent.split(\"\");\n    spt[msg.payload[1][0].Number - 1] = \"1\";\n    binarycurrent = spt.join(\"\");\n    // console.log(binarycurrent);\n    if(flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 0){\n        msg.statusEH1 = true;\n        \n    }else{\n        msg.statusEH1 = false;\n    }\n    \n    msg.payload[2][0][\"Output\"] = parseInt(String(msg.payload[2][0].Output)) + parseInt(String(msg.payload[1][0].Dec));\n    \n}\nif (binarycurrent[msg.payload[1][1].Number - 1] == \"0\" && msg.cmd.includes(\"=[EH2]\")){\n    msg.statusEH2 = true;\n}\n\nmsg.numberOutput = msg.payload[2][0].Output;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\" + \"000\" + String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 860,
        "wires": [
            [
                "e181d40ba2c883c6",
                "7ef3d8868618eb2f"
            ]
        ]
    },
    {
        "id": "d7f5d1cda8b9c2e4",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "Request Temp",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'Temp/RH,CathLab';\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 920,
        "wires": [
            [
                "86d93e43ac494bd0"
            ]
        ]
    },
    {
        "id": "86d93e43ac494bd0",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 750,
        "y": 920,
        "wires": [
            [
                "ab10a2b4ace98698"
            ]
        ]
    },
    {
        "id": "ab10a2b4ace98698",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "Requesting",
        "func": "var d = msg.payload[0];\nvar cmd = \"\";\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"00\";\ncmd += \"00000000\";\nmsg.payload = cmd;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 920,
        "wires": [
            [
                "fe15437ea5ba0d90"
            ]
        ]
    },
    {
        "id": "11a6ec30eae126da",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1260,
        "wires": [
            [
                "a9f72959fbe5bfba"
            ]
        ]
    },
    {
        "id": "a9f72959fbe5bfba",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "-1",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 540,
        "y": 1280,
        "wires": [
            [
                "bb929e060d822f19"
            ]
        ]
    },
    {
        "id": "bb929e060d822f19",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 52",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 1180,
        "wires": []
    },
    {
        "id": "04080a1130160b5c",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 370,
        "y": 1220,
        "wires": [
            [
                "a9f72959fbe5bfba"
            ]
        ]
    },
    {
        "id": "9f44d28a524d189a",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "name": "link out 11",
        "mode": "link",
        "links": [
            "74eb172db82ec21b"
        ],
        "x": 675,
        "y": 960,
        "wires": []
    },
    {
        "id": "a88f76740bd895c4",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "Reset",
        "func": "msg.reset = true;\nmsg.cmd = \"Timeout\";\nflow.set(\"cmdauto\",msg.cmd);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 960,
        "wires": [
            [
                "9f44d28a524d189a"
            ]
        ]
    },
    {
        "id": "74eb172db82ec21b",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "name": "link in 9",
        "links": [
            "9f44d28a524d189a"
        ],
        "x": 315,
        "y": 920,
        "wires": [
            [
                "5325683f3d621a49"
            ]
        ]
    },
    {
        "id": "12622275c3de0746",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "DurationEH",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[6]",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1170,
        "y": 800,
        "wires": []
    },
    {
        "id": "3a635d2fd0debdf4",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "Parse",
        "func": "msg.data = msg.payload;\nvar data = msg.payload;\nvar numBytes = data.length / 2;\nvar byteArray = new Uint8Array(numBytes);\nfor (var i=0; i<numBytes; i++) {\n    byteArray[i] = parseInt(data.substr(i*2, 2), 16);\n}\nvar len = byteArray[3];\nvar byteData = new Uint8Array(len);\nfor (i=0; i<len; i++) {\n    byteData[i] = byteArray[i+4];\n}\nmsg.payload = byteData;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 220,
        "wires": [
            [
                "92c487871b3e54f5"
            ]
        ]
    },
    {
        "id": "92c487871b3e54f5",
        "type": "cayennelpp-decoder",
        "z": "bca4771a12cb11e6",
        "name": "decoder",
        "x": 940,
        "y": 220,
        "wires": [
            [
                "5607eb9495880319"
            ]
        ]
    },
    {
        "id": "5607eb9495880319",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " Build",
        "func": "var data = msg.payload;\ndata.networkid = msg.data.substring(0,2);\ndata.devid = msg.data.substring(2,4);\ndata.typeid = msg.data.substring(4,6);\ndata.epoch = (Date.now());\nmsg.payload = data;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 220,
        "wires": [
            [
                "9e9e4bbb0c14950b"
            ]
        ]
    },
    {
        "id": "e8850da42b358071",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 55",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 180,
        "wires": []
    },
    {
        "id": "0f12a6ea891b06a6",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "func": "// Definisikan objek payload sesuai struktur\nconst payload = {\n  networkId: 3,    // uint8_t\n  deviceId: 5,     // uint8_t\n  cmd: 0,          // uint8_t\n  vParams: 1       // uint32_t\n};\n\n// Fungsi untuk mengonversi objek payload ke buffer\nfunction toBuffer(payload) {\n  const buffer = new ArrayBuffer(7); // Total 7 bytes\n  const view = new DataView(buffer);\n  \n  view.setUint8(0, payload.networkId);      // 1 byte\n  view.setUint8(1, payload.deviceId);       // 1 byte\n  view.setUint8(2, payload.cmd);            // 1 byte\n  view.setUint32(3, payload.vParams, true); // 4 bytes, little-endian\n\n  return buffer;\n}\n\n// Fungsi untuk mengonversi buffer ke array biner\nfunction bufferToBinaryArray(buffer) {\n  return new Uint8Array(buffer);\n}\n\n// Konversi payload ke buffer\nconst buffer = toBuffer(payload);\n\n// Konversi buffer ke array biner\nconst binaryArray = bufferToBinaryArray(buffer);\n\n// Menampilkan hasil\nconsole.log(binaryArray); // Output: Uint8Array(7) [3, 5, 0, 1, 0, 0, 0]\n\nmsg.payload = binaryArray;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "ad16923ac117ca11",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "02020000000000",
        "payloadType": "str",
        "x": 330,
        "y": 1320,
        "wires": [
            [
                "618781567775cb33"
            ]
        ]
    },
    {
        "id": "d93bd8c13a098354",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "02030000000000",
        "payloadType": "str",
        "x": 330,
        "y": 1340,
        "wires": [
            [
                "618781567775cb33"
            ]
        ]
    },
    {
        "id": "452a08a2ecd000fb",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "03020000000000",
        "payloadType": "str",
        "x": 330,
        "y": 1360,
        "wires": [
            [
                "618781567775cb33"
            ]
        ]
    },
    {
        "id": "81c53adc24a6b2c0",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "03030000000000",
        "payloadType": "str",
        "x": 330,
        "y": 1380,
        "wires": [
            [
                "618781567775cb33"
            ]
        ]
    },
    {
        "id": "630633361be9d6e5",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "02040000000000",
        "payloadType": "str",
        "x": 330,
        "y": 1420,
        "wires": [
            [
                "618781567775cb33"
            ]
        ]
    },
    {
        "id": "6740adef3e356734",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "02050000000000",
        "payloadType": "str",
        "x": 330,
        "y": 1440,
        "wires": [
            [
                "618781567775cb33"
            ]
        ]
    },
    {
        "id": "8582684e34c27f05",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "03040000000000",
        "payloadType": "str",
        "x": 330,
        "y": 1460,
        "wires": [
            [
                "618781567775cb33"
            ]
        ]
    },
    {
        "id": "cbc4f23132bba81b",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "03050000000000",
        "payloadType": "str",
        "x": 330,
        "y": 1480,
        "wires": [
            [
                "618781567775cb33"
            ]
        ]
    },
    {
        "id": "2815e1177e773fe4",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 56",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 330,
        "y": 140,
        "wires": []
    },
    {
        "id": "b887391189b3c680",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 780,
        "y": 1060,
        "wires": [
            []
        ]
    },
    {
        "id": "afc24fc8811b2d55",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "reset",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            },
            {
                "p": "reset",
                "v": "true",
                "vt": "bool"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 790,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "383f6ffac4644ac2",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 57",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1160,
        "y": 1080,
        "wires": []
    },
    {
        "id": "dae22984db30bba3",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "15",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 450,
        "y": 1000,
        "wires": [
            [
                "1658ac7b84089f6b"
            ]
        ]
    },
    {
        "id": "1658ac7b84089f6b",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "Turn Off EH",
        "func": "msg.topic = \"SELECT * FROM `devicelist` WHERE `keterangan` = 'RelayOutput';\";\nmsg.topic += \"SELECT * FROM `Output` WHERE `keterangan` = 'EH1' OR `keterangan` = 'EH2';\";\nmsg.topic += \"SELECT * FROM `Operation`;\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1000,
        "wires": [
            [
                "0494c8d6085a4cf0"
            ]
        ]
    },
    {
        "id": "0494c8d6085a4cf0",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 750,
        "y": 1000,
        "wires": [
            [
                "01fea39265f2dc97"
            ]
        ]
    },
    {
        "id": "01fea39265f2dc97",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " Off1",
        "func": "msg.resultsql = msg.payload;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\nvar binarycurrent = reverseString(decToBinary(msg.payload[2][0].Output));\nif(binarycurrent[msg.payload[1][0].Number-1] == \"1\"){\n    var spt = binarycurrent.split(\"\");\n    spt[msg.payload[1][0].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if(flow.get(\"RelayOutput\")[msg.payload[1][0].Number].Stat == 1){\n        msg.statusEH1 = true;\n    }else{\n        msg.statusEH1 = false;\n    }\n    msg.payload[2][0][\"Output\"] = parseInt(String(msg.payload[2][0].Output)) -  parseInt(String(msg.payload[1][0].Dec));\n}\nif(binarycurrent[msg.payload[1][1].Number-1] == \"1\"){\n    msg.statusEH2 = true;\n}\nmsg.numberOutput = msg.payload[2][0].Output;\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1000,
        "wires": [
            [
                "710352610b5171f7",
                "44ece0d16efb9af2"
            ]
        ]
    },
    {
        "id": "e181d40ba2c883c6",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "property": "statusEH1",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 990,
        "y": 840,
        "wires": [
            [
                "b7a0b469689fefd3"
            ]
        ]
    },
    {
        "id": "710352610b5171f7",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "property": "statusEH1",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 990,
        "y": 980,
        "wires": [
            [
                "fcded8e6800db872"
            ]
        ]
    },
    {
        "id": "44ece0d16efb9af2",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 990,
        "y": 1020,
        "wires": [
            [
                "d802d6a814ceb1d0"
            ]
        ]
    },
    {
        "id": "ddab33048d01b3d5",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " Off2",
        "func": "msg.payload = msg.resultsql;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\ncmd += \"01\";\nvar binarycurrent = reverseString(decToBinary(msg.numberOutput));\nif (binarycurrent[msg.payload[1][1].Number -1] == \"1\"){\n    var spt = binarycurrent.split(\"\");\n    spt[msg.payload[1][1].Number - 1] = \"0\";\n    binarycurrent = spt.join(\"\");\n    if (flow.get(\"RelayOutput\")[msg.payload[1][1].Number].Stat == 1){\n        msg.statusEH2 = true;\n    }else{\n        msg.statusEH2 = false;\n    }\n   msg[\"numberOutput\"] = parseInt(String(msg.numberOutput)) -  parseInt(String(msg.payload[1][1].Dec));\n}\n\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 1020,
        "wires": [
            [
                "2ee5fb66a447ff24",
                "383f6ffac4644ac2"
            ]
        ]
    },
    {
        "id": "d802d6a814ceb1d0",
        "type": "delay",
        "z": "bca4771a12cb11e6",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1140,
        "y": 1020,
        "wires": [
            [
                "ddab33048d01b3d5"
            ]
        ]
    },
    {
        "id": "300675ed5fd9466c",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "name": "link out 12",
        "mode": "link",
        "links": [
            "dd1e1bf4fa001f32"
        ],
        "x": 1475,
        "y": 1020,
        "wires": []
    },
    {
        "id": "022a029521e3c1dd",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "name": "link out 13",
        "mode": "link",
        "links": [
            "dd1e1bf4fa001f32"
        ],
        "x": 995,
        "y": 800,
        "wires": []
    },
    {
        "id": "fe15437ea5ba0d90",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "name": "link out 14",
        "mode": "link",
        "links": [
            "dd1e1bf4fa001f32"
        ],
        "x": 995,
        "y": 920,
        "wires": []
    },
    {
        "id": "fcded8e6800db872",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "name": "link out 15",
        "mode": "link",
        "links": [
            "dd1e1bf4fa001f32"
        ],
        "x": 1095,
        "y": 980,
        "wires": []
    },
    {
        "id": "9d6f10db5c0fea06",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "aadd16a462e83be5",
        "name": " ",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 610,
        "y": 80,
        "wires": []
    },
    {
        "id": "2ee5fb66a447ff24",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 1020,
        "wires": [
            [
                "300675ed5fd9466c"
            ]
        ]
    },
    {
        "id": "7ef3d8868618eb2f",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 990,
        "y": 880,
        "wires": [
            [
                "8099edeb0376bcea"
            ]
        ]
    },
    {
        "id": "8099edeb0376bcea",
        "type": "delay",
        "z": "bca4771a12cb11e6",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1140,
        "y": 880,
        "wires": [
            [
                "efd4c15eee3524d0"
            ]
        ]
    },
    {
        "id": "efd4c15eee3524d0",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "On2",
        "func": "msg.payload = msg.resultsql;\nvar d = msg.payload[0][0];\nvar cmd = \"\";\nmsg.statusEH1 = false;\nmsg.statusEH2 = false;\nfor (let index = 0; index < Object.keys(d).length-2; index++) {\n    cmd += d[Object.keys(d)[index]];\n}\nconsole.log(\"Output : \"+msg.payload[2][0].Output);\ncmd += \"01\";\nvar binarycurrent = reverseString(decToBinary(msg.numberOutput));\nif(binarycurrent[msg.payload[1][1].Number-1] == \"0\"){\n    console.log(binarycurrent);\n    var spt = binarycurrent.split(\"\");\n    spt[msg.payload[1][1].Number - 1] = \"1\";\n    binarycurrent = spt.join(\"\");\n    console.log(binarycurrent);\n    if (flow.get(\"RelayOutput\")[msg.payload[1][1].Number].Stat == 0){\n        msg.statusEH2 = true;\n    }else{\n        msg.statusEH2 = false;\n    }\n   msg[\"numberOutput\"] = parseInt(String(msg.numberOutput)) +  parseInt(String(msg.payload[1][1].Dec));\n}\n\nvar hex = binaryToHex(reverseString(binarycurrent));\ncmd += \"0000\"+\"000\"+String(dec2hex(hex));\nmsg.payload = cmd;\nreturn msg;\n\nfunction dec2hex(decimalNumber) {\n    if (decimalNumber < 0 || decimalNumber > 15) {\n        return \"Out of range\";\n    }\n    return decimalNumber.toString(16).toUpperCase();\n}\n\nfunction decToBinary(dec) {\n    // Ensure the input is a number\n    if (typeof dec !== 'number' || isNaN(dec)) {\n        throw new Error('Input must be a valid number');\n    }\n\n    // Handle negative numbers by using two's complement representation\n    if (dec < 0) {\n        return (dec >>> 0).toString(2).padStart(32, '0');\n    }\n\n    // Convert decimal to binary using toString method\n    let binaryStr = dec.toString(2);\n\n    // Pad the binary string to 8 bits\n    return binaryStr.padStart(8, '0');\n}\nfunction reverseString(str) {\n    // Mengubah string menjadi array, membalik array, dan menggabungkan kembali menjadi string\n    return str.split('').reverse().join('');\n}\n\nfunction binaryToHex(binaryStr) {\n    // Ensure the input is a valid binary string\n    if (typeof binaryStr !== 'string' || !/^[01]+$/.test(binaryStr)) {\n        throw new Error('Input must be a valid binary string');\n    }\n\n    // Parse the binary string to a decimal number\n    const decimal = parseInt(binaryStr, 2);\n\n    // Convert the decimal number to a hexadecimal string\n    const hexStr = decimal.toString(16);\n\n    // Return the hexadecimal string (in uppercase for consistency)\n    return hexStr.toUpperCase();\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 880,
        "wires": [
            [
                "99d7acf34720e090"
            ]
        ]
    },
    {
        "id": "99d7acf34720e090",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "property": "statusEH2",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1390,
        "y": 880,
        "wires": [
            [
                "bf104e7cca1d96a0"
            ]
        ]
    },
    {
        "id": "386f9fa4386ae385",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "=EH2]",
        "payloadType": "str",
        "x": 920,
        "y": 1180,
        "wires": [
            [
                "a21abe22c5512c12"
            ]
        ]
    },
    {
        "id": "a21abe22c5512c12",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "=[",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1080,
        "y": 1180,
        "wires": [
            [
                "f305445cebfd191f"
            ]
        ]
    },
    {
        "id": "f305445cebfd191f",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 58",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 1180,
        "wires": []
    },
    {
        "id": "bf104e7cca1d96a0",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "name": "link out 16",
        "mode": "link",
        "links": [
            "dd1e1bf4fa001f32"
        ],
        "x": 1475,
        "y": 880,
        "wires": []
    },
    {
        "id": "46d993a4eb026271",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "EH1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "UPDATE `Output` SET `Stat` = 1 WHERE `keterangan` = \"EH1\"; UPDATE `Operation` SET `Output` = 1;",
        "payload": "",
        "payloadType": "date",
        "x": 530,
        "y": 220,
        "wires": [
            [
                "1c6ac3e90cbac996"
            ]
        ]
    },
    {
        "id": "1c6ac3e90cbac996",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "func": "var d = flow.get(\"RelayOutput\");\nd[1][\"Stat\"] = 1;\nflow.set(\"RelayOutput\",d);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 220,
        "wires": [
            [
                "3fae4a69287e8867"
            ]
        ]
    },
    {
        "id": "c212b5b4b106485d",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "EH2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "UPDATE `Output` SET `Stat` = 1 WHERE `keterangan` = \"EH2\"; UPDATE `Operation` SET `Output` = 2;",
        "payload": "",
        "payloadType": "date",
        "x": 530,
        "y": 260,
        "wires": [
            [
                "a8b08e1705fe67e9"
            ]
        ]
    },
    {
        "id": "a8b08e1705fe67e9",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "func": "var d = flow.get(\"RelayOutput\");\nd[2][\"Stat\"] = 1;\nflow.set(\"RelayOutput\",d);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 260,
        "wires": [
            [
                "3fae4a69287e8867"
            ]
        ]
    },
    {
        "id": "3fae4a69287e8867",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "name": "link out 18",
        "mode": "link",
        "links": [
            "2b3434178f0ac999"
        ],
        "x": 755,
        "y": 280,
        "wires": []
    },
    {
        "id": "62c2245aabc41ac8",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "EH1&2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "UPDATE `Output` SET `Stat` = 1 WHERE `keterangan` = \"EH1\" OR `keterangan` = \"EH2\"; UPDATE `Operation` SET `Output` = 3;",
        "payload": "",
        "payloadType": "date",
        "x": 530,
        "y": 300,
        "wires": [
            [
                "136097ba3df47c6f"
            ]
        ]
    },
    {
        "id": "136097ba3df47c6f",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "func": "var d = flow.get(\"RelayOutput\");\nd[0][\"Stat\"] = 1;\nd[1][\"Stat\"] = 1;\nflow.set(\"RelayOutput\",d);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 300,
        "wires": [
            [
                "3fae4a69287e8867"
            ]
        ]
    },
    {
        "id": "36daea9165702a4e",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "EH",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "UPDATE `Output` SET `Stat` = 0 WHERE `keterangan` = \"EH1\" OR `keterangan` = \"EH2\"; UPDATE `Operation` SET `Output` = 0;",
        "payload": "",
        "payloadType": "date",
        "x": 530,
        "y": 340,
        "wires": [
            [
                "8fbcad44da74550e"
            ]
        ]
    },
    {
        "id": "8fbcad44da74550e",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "func": "var d = flow.get(\"RelayOutput\");\nd[0][\"Stat\"] = 0;\nd[1][\"Stat\"] = 0;\nflow.set(\"RelayOutput\",d);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 340,
        "wires": [
            [
                "3fae4a69287e8867"
            ]
        ]
    },
    {
        "id": "31ef301a128c4b66",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 60",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 370,
        "y": 220,
        "wires": []
    },
    {
        "id": "aa65a38826eefec0",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "name": "Waiting",
        "op1": "",
        "op2": "0",
        "op1type": "nul",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "overrideDelay": true,
        "units": "ms",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 460,
        "y": 960,
        "wires": [
            [
                "a88f76740bd895c4"
            ]
        ]
    },
    {
        "id": "5325683f3d621a49",
        "type": "trigger",
        "z": "bca4771a12cb11e6",
        "name": " ",
        "op1": "1",
        "op2": "",
        "op1type": "str",
        "op2type": "nul",
        "duration": "-30",
        "extend": false,
        "overrideDelay": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 450,
        "y": 920,
        "wires": [
            [
                "d7f5d1cda8b9c2e4"
            ]
        ]
    },
    {
        "id": "53d8c949e6b18ef1",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04020000000000",
        "payloadType": "str",
        "x": 330,
        "y": 1520,
        "wires": [
            [
                "618781567775cb33"
            ]
        ]
    },
    {
        "id": "bee54eca56ea9045",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "04030000000000",
        "payloadType": "str",
        "x": 330,
        "y": 1540,
        "wires": [
            [
                "618781567775cb33"
            ]
        ]
    },
    {
        "id": "d6aa40b162d6b292",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "name": "link out 19",
        "mode": "link",
        "links": [
            "fdb500481cbf7d01"
        ],
        "x": 1115,
        "y": 520,
        "wires": []
    },
    {
        "id": "fdb500481cbf7d01",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "name": "link in 10",
        "links": [
            "d6aa40b162d6b292"
        ],
        "x": 565,
        "y": 680,
        "wires": [
            [
                "7a293eedb6b117a7",
                "06fb4a2bad3b8364"
            ]
        ]
    },
    {
        "id": "7a293eedb6b117a7",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "EH1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[7][1].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 670,
        "y": 640,
        "wires": []
    },
    {
        "id": "06fb4a2bad3b8364",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "EH2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload[8][2].Stat",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 670,
        "y": 700,
        "wires": []
    },
    {
        "id": "e1f5480776bb23d2",
        "type": "debug",
        "z": "57a8e6e09724ec39",
        "g": "ce6092360da2da00",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 100,
        "wires": []
    },
    {
        "id": "679d1f1d321ffb54",
        "type": "mysql",
        "z": "57a8e6e09724ec39",
        "g": "ce6092360da2da00",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 540,
        "y": 100,
        "wires": [
            [
                "e1f5480776bb23d2"
            ]
        ]
    },
    {
        "id": "64b8533b0b2f03ad",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "ce6092360da2da00",
        "name": "Select Value",
        "func": "msg.topic = \"SELECT * FROM MonitoringData\";\n// msg.topic = \"SELECT Temp_Cathlab FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 100,
        "wires": [
            [
                "679d1f1d321ffb54"
            ]
        ]
    },
    {
        "id": "4b43c6dce1977e9c",
        "type": "inject",
        "z": "57a8e6e09724ec39",
        "g": "ce6092360da2da00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "64b8533b0b2f03ad"
            ]
        ]
    },
    {
        "id": "537397df410d682a",
        "type": "http in",
        "z": "57a8e6e09724ec39",
        "g": "6b4d024ab7b25c4c",
        "name": "",
        "url": "/getData",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "5b08597283a9c34f"
            ]
        ]
    },
    {
        "id": "6a4a06a45fb80d04",
        "type": "mysql",
        "z": "57a8e6e09724ec39",
        "g": "6b4d024ab7b25c4c",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 580,
        "y": 220,
        "wires": [
            [
                "4dbe83f2e3ecf6f0"
            ]
        ]
    },
    {
        "id": "5b08597283a9c34f",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "6b4d024ab7b25c4c",
        "name": "Query",
        "func": "// msg.topic = \"SELECT Temp_Machine FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\nmsg.topic = \"SELECT * FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 220,
        "wires": [
            [
                "6a4a06a45fb80d04"
            ]
        ]
    },
    {
        "id": "4dbe83f2e3ecf6f0",
        "type": "http response",
        "z": "57a8e6e09724ec39",
        "g": "6b4d024ab7b25c4c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 220,
        "wires": []
    },
    {
        "id": "04f4b623aa95ece0",
        "type": "http in",
        "z": "57a8e6e09724ec39",
        "g": "6b4d024ab7b25c4c",
        "name": "",
        "url": "/getDataSetting",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "03eda52da48cfdbb"
            ]
        ]
    },
    {
        "id": "03eda52da48cfdbb",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "6b4d024ab7b25c4c",
        "name": "Query",
        "func": "// msg.topic = \"SELECT Temp_Machine FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\nmsg.topic = \"SELECT * FROM setting  LIMIT 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 280,
        "wires": [
            [
                "62276a9f2eb4a7c4"
            ]
        ]
    },
    {
        "id": "b3cade89519d6d84",
        "type": "http response",
        "z": "57a8e6e09724ec39",
        "g": "6b4d024ab7b25c4c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 280,
        "wires": []
    },
    {
        "id": "62276a9f2eb4a7c4",
        "type": "mysql",
        "z": "57a8e6e09724ec39",
        "g": "6b4d024ab7b25c4c",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 580,
        "y": 280,
        "wires": [
            [
                "b3cade89519d6d84"
            ]
        ]
    },
    {
        "id": "3b27314051618ab0",
        "type": "mysql",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 950,
        "y": 400,
        "wires": [
            [
                "438b8b5fb2428a49"
            ]
        ]
    },
    {
        "id": "438b8b5fb2428a49",
        "type": "http response",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1100,
        "y": 400,
        "wires": []
    },
    {
        "id": "3b7f62e540788fca",
        "type": "http in",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "",
        "url": "/setDataTemp",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "f8431f71d42202f0"
            ]
        ]
    },
    {
        "id": "f8431f71d42202f0",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 400,
        "wires": [
            [
                "58982a5216ccf1d1"
            ]
        ]
    },
    {
        "id": "58982a5216ccf1d1",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "UPDATE setting SET TempCathlab",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET TempCathlab = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 400,
        "wires": [
            [
                "3b27314051618ab0"
            ]
        ]
    },
    {
        "id": "069d507abaacbd5a",
        "type": "http in",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "",
        "url": "/setDataRH",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 440,
        "wires": [
            [
                "676bf34c056ee6d4"
            ]
        ]
    },
    {
        "id": "676bf34c056ee6d4",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 440,
        "wires": [
            [
                "391b6164f4fe416c"
            ]
        ]
    },
    {
        "id": "391b6164f4fe416c",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "UPDATE setting SET RHCathlab",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET RHCathlab = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 440,
        "wires": [
            [
                "3b27314051618ab0"
            ]
        ]
    },
    {
        "id": "c433113f1901e9f8",
        "type": "http in",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "",
        "url": "/setDataTempM",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 480,
        "wires": [
            [
                "a775b6857b7fe93a"
            ]
        ]
    },
    {
        "id": "a775b6857b7fe93a",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 480,
        "wires": [
            [
                "3636da8784705a68"
            ]
        ]
    },
    {
        "id": "3636da8784705a68",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "UPDATE setting SET TempMachine ",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET TempMachine = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 480,
        "wires": [
            [
                "3b27314051618ab0"
            ]
        ]
    },
    {
        "id": "fb33186f80d938cb",
        "type": "http in",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "",
        "url": "/setDataRHM",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 520,
        "wires": [
            [
                "f5584635e347aee0"
            ]
        ]
    },
    {
        "id": "f5584635e347aee0",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 520,
        "wires": [
            [
                "9984221615af2d3c"
            ]
        ]
    },
    {
        "id": "9984221615af2d3c",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "UPDATE setting SET RHMachine",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET RHMachine = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 520,
        "wires": [
            [
                "3b27314051618ab0"
            ]
        ]
    },
    {
        "id": "7b7a09cf.1e6d24",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "f748addfc5106e47",
        "name": "Prepare data for inserting into the database",
        "func": "// Generate sample data to insert\nconst data = {\n    Timestamp: new Date(),\n    Temp_Cathlab: 25.5,\n    RH_Cathlab: 60,\n    Temp_Machine: 27.8,\n    RH_Machine: 55.5,\n    Outdoor_Unit: 1,\n    AHU_Status: 1,\n    Pre_Filter: 155,\n    HEPA_Filter: 155,\n    Booster_Fan: 1,\n    Exhaust_Fan: 1,\n    Heater_1: 1,\n    Heater_2: 1\n};\n\n// Construct the SQL query\nconst keys = Object.keys(data);\nconst values = Object.values(data).map(value => typeof value === 'string' ? '${value}' : value);\nconst placeholders = keys.map(() => '?').join(',');\nconst query = `INSERT INTO monitoringdata (${keys.join(',')}) VALUES (${placeholders})`;\n\n// Set the query as payload for the next node\nmsg.topic = query;\nmsg.payload = values;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 660,
        "wires": [
            [
                "801c75c13c587a80"
            ]
        ]
    },
    {
        "id": "fde57690.944ea8",
        "type": "inject",
        "z": "57a8e6e09724ec39",
        "g": "f748addfc5106e47",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 660,
        "wires": [
            [
                "7b7a09cf.1e6d24"
            ]
        ]
    },
    {
        "id": "810bb31b564b3d49",
        "type": "debug",
        "z": "57a8e6e09724ec39",
        "g": "f748addfc5106e47",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 660,
        "wires": []
    },
    {
        "id": "801c75c13c587a80",
        "type": "mysql",
        "z": "57a8e6e09724ec39",
        "g": "f748addfc5106e47",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 880,
        "y": 660,
        "wires": [
            [
                "810bb31b564b3d49"
            ]
        ]
    }
]