[
    {
        "id": "bca4771a12cb11e6",
        "type": "tab",
        "label": "System",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "57a8e6e09724ec39",
        "type": "tab",
        "label": "Local Interface",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e9b71a55.b25c68",
        "type": "subflow",
        "name": "Loops",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "9f7aa00f.d31ab"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 640,
                "y": 40,
                "wires": [
                    {
                        "id": "f2a7b456.1521f8",
                        "port": 0
                    }
                ]
            },
            {
                "x": 460,
                "y": 220,
                "wires": [
                    {
                        "id": "6b0c2d4d.1d2934",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "color": "#DDAA99"
    },
    {
        "id": "ce6092360da2da00",
        "type": "group",
        "z": "57a8e6e09724ec39",
        "name": "Developer Debug",
        "style": {
            "label": true,
            "fill": "#e3f3d3"
        },
        "nodes": [
            "e1f5480776bb23d2",
            "679d1f1d321ffb54",
            "64b8533b0b2f03ad",
            "4b43c6dce1977e9c"
        ],
        "x": 54,
        "y": 59,
        "w": 792,
        "h": 82
    },
    {
        "id": "6b4d024ab7b25c4c",
        "type": "group",
        "z": "57a8e6e09724ec39",
        "name": "Get Data From MySQL",
        "style": {
            "label": true,
            "fill": "#bfdbef"
        },
        "nodes": [
            "537397df410d682a",
            "6a4a06a45fb80d04",
            "5b08597283a9c34f",
            "4dbe83f2e3ecf6f0",
            "04f4b623aa95ece0",
            "03eda52da48cfdbb",
            "b3cade89519d6d84",
            "62276a9f2eb4a7c4"
        ],
        "x": 54,
        "y": 179,
        "w": 792,
        "h": 142
    },
    {
        "id": "525e434a306529fc",
        "type": "group",
        "z": "57a8e6e09724ec39",
        "name": "Set Thermostats",
        "style": {
            "label": true,
            "fill": "#dbcbe7"
        },
        "nodes": [
            "3b27314051618ab0",
            "438b8b5fb2428a49",
            "3b7f62e540788fca",
            "f8431f71d42202f0",
            "58982a5216ccf1d1",
            "069d507abaacbd5a",
            "676bf34c056ee6d4",
            "391b6164f4fe416c",
            "c433113f1901e9f8",
            "a775b6857b7fe93a",
            "3636da8784705a68",
            "fb33186f80d938cb",
            "f5584635e347aee0",
            "9984221615af2d3c"
        ],
        "x": 54,
        "y": 359,
        "w": 1122,
        "h": 202
    },
    {
        "id": "f748addfc5106e47",
        "type": "group",
        "z": "57a8e6e09724ec39",
        "name": "Insert Database",
        "style": {
            "label": true,
            "fill": "#ffbfbf"
        },
        "nodes": [
            "7b7a09cf.1e6d24",
            "fde57690.944ea8",
            "810bb31b564b3d49",
            "801c75c13c587a80"
        ],
        "x": 54,
        "y": 619,
        "w": 1132,
        "h": 82
    },
    {
        "id": "cbbdeba1125ca19b",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Gateway",
        "style": {
            "label": true
        },
        "nodes": [
            "61569cd1264aebef",
            "1ec9c25db1122edf",
            "4c80d3fd31ff5440",
            "dd1e1bf4fa001f32"
        ],
        "x": 14,
        "y": 39,
        "w": 452,
        "h": 82
    },
    {
        "id": "1cbfcd06637d48ad",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "initiate",
        "style": {
            "label": true
        },
        "nodes": [
            "62a153d4d974c23e",
            "7a37686efd1c39c5",
            "4958a8f1dc7bf670",
            "a421582f2823dadb"
        ],
        "x": 704,
        "y": 39,
        "w": 662,
        "h": 82
    },
    {
        "id": "aadd16a462e83be5",
        "type": "group",
        "z": "bca4771a12cb11e6",
        "name": "Execute SQL",
        "style": {
            "label": true
        },
        "nodes": [
            "ed77b13627de379d",
            "2b3434178f0ac999"
        ],
        "x": 484,
        "y": 39,
        "w": 202,
        "h": 82
    },
    {
        "id": "3b8e5eb93b7526d7",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "rsjpharapankita",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "415d098faf23ad7c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e7691dfa6e339e7c",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "DatabaseUtama",
        "name": "",
        "usetls": true,
        "tls": "",
        "influxdbVersion": "2.0",
        "url": "http://localhost:8086",
        "timeout": "10",
        "rejectUnauthorized": true
    },
    {
        "id": "b9cc59e6.7e5e68",
        "type": "influxdb",
        "hostname": "localhost",
        "port": "8086",
        "protocol": "http",
        "database": "your_database",
        "name": "InfluxDB",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "9f7aa00f.d31ab",
        "type": "function",
        "z": "e9b71a55.b25c68",
        "name": "InitiateLoop",
        "func": "var data = msg.payload;\nvar limit = data.length;\nflow.set(\"data\",data);\nflow.set(\"limit\",limit);\nmsg.topic = \"0\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 170,
        "y": 40,
        "wires": [
            [
                "f2a7b456.1521f8"
            ]
        ]
    },
    {
        "id": "f2a7b456.1521f8",
        "type": "function",
        "z": "e9b71a55.b25c68",
        "name": "Loop",
        "func": "var data = flow.get(\"data\");\nvar count = parseInt(msg.topic);\nmsg.payload = data[count];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 310,
        "y": 40,
        "wires": [
            [
                "31bc9e4a.f0c962"
            ]
        ]
    },
    {
        "id": "26ad85dd.1a426a",
        "type": "link in",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "6e495066.b7de"
        ],
        "x": 215,
        "y": 80,
        "wires": [
            [
                "f2a7b456.1521f8"
            ]
        ]
    },
    {
        "id": "31bc9e4a.f0c962",
        "type": "link out",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "4642e834.27d108"
        ],
        "x": 395,
        "y": 80,
        "wires": []
    },
    {
        "id": "6e495066.b7de",
        "type": "link out",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "26ad85dd.1a426a"
        ],
        "x": 615,
        "y": 180,
        "wires": []
    },
    {
        "id": "4642e834.27d108",
        "type": "link in",
        "z": "e9b71a55.b25c68",
        "name": "",
        "links": [
            "31bc9e4a.f0c962"
        ],
        "x": 95,
        "y": 180,
        "wires": [
            [
                "db2b7400.81c1e8"
            ]
        ]
    },
    {
        "id": "db2b7400.81c1e8",
        "type": "function",
        "z": "e9b71a55.b25c68",
        "name": "Increment",
        "func": "var limit = flow.get(\"limit\");\nvar count = parseInt(msg.topic);\ncount++;\nif(count>=limit){\n    msg.payload = null;\n}\nmsg.topic = String(count);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 200,
        "y": 180,
        "wires": [
            [
                "6b0c2d4d.1d2934"
            ]
        ]
    },
    {
        "id": "6b0c2d4d.1d2934",
        "type": "switch",
        "z": "e9b71a55.b25c68",
        "name": "Continue?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 180,
        "wires": [
            [
                "f20c27b7.bee1c8"
            ],
            []
        ]
    },
    {
        "id": "f20c27b7.bee1c8",
        "type": "delay",
        "z": "e9b71a55.b25c68",
        "name": "",
        "pauseType": "delayv",
        "timeout": "1",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 500,
        "y": 180,
        "wires": [
            [
                "6e495066.b7de"
            ]
        ]
    },
    {
        "id": "61569cd1264aebef",
        "type": "mqtt in",
        "z": "bca4771a12cb11e6",
        "g": "cbbdeba1125ca19b",
        "name": "",
        "topic": "iota238/data",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "415d098faf23ad7c",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 110,
        "y": 80,
        "wires": [
            [
                "4c80d3fd31ff5440"
            ]
        ]
    },
    {
        "id": "1ec9c25db1122edf",
        "type": "mqtt out",
        "z": "bca4771a12cb11e6",
        "g": "cbbdeba1125ca19b",
        "name": "",
        "topic": "iota238/cmd",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "415d098faf23ad7c",
        "x": 370,
        "y": 80,
        "wires": []
    },
    {
        "id": "4c80d3fd31ff5440",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "g": "cbbdeba1125ca19b",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "0cbc509033550b7f"
        ],
        "x": 215,
        "y": 80,
        "wires": []
    },
    {
        "id": "0cbc509033550b7f",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "name": "link in 1",
        "links": [
            "4c80d3fd31ff5440"
        ],
        "x": 45,
        "y": 300,
        "wires": [
            [
                "94514e5dd76e1b4a"
            ]
        ]
    },
    {
        "id": "ed77b13627de379d",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "g": "aadd16a462e83be5",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 610,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "5b8d8dea5122397e",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "name": "( networkID)",
        "property": "networkid",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "04",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "04",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 300,
        "wires": [
            [
                "83efeb6b5a73d7c6"
            ],
            [
                "fb1bf2e163b3c7a9"
            ]
        ]
    },
    {
        "id": "83efeb6b5a73d7c6",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "Parse",
        "func": "msg.deviceinfo = msg.payload[0];\nvar data = msg.realdata;\nvar numBytes = data.length / 2;\nvar byteArray = new Uint8Array(numBytes);\nfor (var i=0; i<numBytes; i++) {\n    byteArray[i] = parseInt(data.substr(i*2, 2), 16);\n}\nvar len = byteArray[3];\nvar byteData = new Uint8Array(len);\nfor (i=0; i<len; i++) {\n    byteData[i] = byteArray[i+4];\n}\nmsg.payload = byteData;\nmsg.data = data.substr(0,6);\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 280,
        "wires": [
            [
                "df5d05325874622c"
            ]
        ]
    },
    {
        "id": "df5d05325874622c",
        "type": "cayennelpp-decoder",
        "z": "bca4771a12cb11e6",
        "name": "decoder",
        "x": 820,
        "y": 280,
        "wires": [
            [
                "91c1d36297a0c7fd"
            ]
        ]
    },
    {
        "id": "91c1d36297a0c7fd",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " Build",
        "func": "var data = msg.payload;\ndata.networkid = msg.data.substring(0,2);\ndata.devid = msg.data.substring(2,4);\ndata.typeid = msg.data.substring(4,6);\ndata.epoch = (Date.now());\nmsg.payload = data;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 950,
        "y": 280,
        "wires": [
            [
                "f20849a9ab1503b2"
            ]
        ]
    },
    {
        "id": "f41842a72cb70323",
        "type": "switch",
        "z": "bca4771a12cb11e6",
        "name": " Listed?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 400,
        "y": 300,
        "wires": [
            [
                "5b8d8dea5122397e"
            ]
        ]
    },
    {
        "id": "94514e5dd76e1b4a",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "Check ID",
        "func": "msg.realdata = msg.payload;\nvar networkid = msg.payload.substring(0,2);\nvar devid = msg.payload.substring(2,4);\nvar typeid = msg.payload.substring(4,6);\nmsg.topic = \"SELECT * from `devicelist` WHERE \";\nmsg.topic += \"`networkid` = '\"+networkid+\"' AND \";\nmsg.topic += \"`devid` = '\" + devid +\"' AND \";\nmsg.topic += \"`typeid` = '\" + typeid +\"';\";\nmsg.networkid = msg.realdata.substring(0,2);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 300,
        "wires": [
            [
                "92b7c675366c9d8d",
                "2f2920dd4524f8a1"
            ]
        ]
    },
    {
        "id": "09cadf8846fbce47",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "Pressure",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 200,
        "wires": [
            [
                "5f9f6b38940d4cbc"
            ]
        ]
    },
    {
        "id": "5f9f6b38940d4cbc",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "Pressure",
        "func": "msg.payload = { temperature_1 : 27.3, barometric_pressure_1 : 1.6, networkid : \"02\", devid : \"03\", typeid : \"02\", epo:1 }\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 200,
        "wires": [
            [
                "797d03be49f87377"
            ]
        ]
    },
    {
        "id": "a489b477160810b5",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "Temp",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 240,
        "wires": [
            [
                "dde053031226823c"
            ]
        ]
    },
    {
        "id": "dde053031226823c",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "Temp",
        "func": "msg.payload = {\ntemperature_1: 27,\nrelative_humidity_1:60,\nbarometric_pressure_1: -913.7,\nnetworkid: \"03\",\ndevid : \"05\",\ntypeid : \"03\",\nepo:2\n}\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 240,
        "wires": [
            [
                "797d03be49f87377"
            ]
        ]
    },
    {
        "id": "f20849a9ab1503b2",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "Query",
        "func": "var d = msg.deviceinfo;\nmsg.topic = \"UPDATE `monitoringdata` SET \";\nif(d.keterangan.split(\",\")[0] == \"Temp/RH\"){\n    if(d.keterangan.split(\",\")[1] == \"CathLab\"){\n        msg.topic += \"`Temp_Cathlab` = \"+String(msg.payload.temperature_1)+\",\";\n        msg.topic += \"`RH_Cathlab` = \"+String(msg.payload.relative_humidity_1)+\";\";\n        flow.set(\"Temp_Cathlab\",msg.payload.temperature_1);\n        flow.set(\"RH_Cathlab\", msg.payload.relative_humidity_1);\n    } else if (d.keterangan.split(\",\")[1] == \"Machine\"){\n        msg.topic += \"`Temp_Machine` = \" + String(msg.payload.temperature_1) + \",\";\n        msg.topic += \"`RH_Machine` = \" + String(msg.payload.relative_humidity_1) + \";\";\n        flow.set(\"Temp_Machine\", msg.payload.temperature_1);\n        flow.set(\"RH_Machine\", msg.payload.relative_humidity_1);\n    }\n} else if (d.keterangan.split(\",\")[0] == \"Pressure\"){\n    if (d.keterangan.split(\",\")[1] == \"MediumFilter\") {\n        msg.topic += \"`Pre_Filter` = \" + String(msg.payload.barometric_pressure_1) + \";\";\n        flow.set(\"Pre_Filter\", msg.payload.barometric_pressure_1);\n    } else if (d.keterangan.split(\",\")[1] == \"HepaFilter\") {\n        msg.topic += \"`HEPA_Filter` = \" + String(msg.payload.barometric_pressure_1) + \";\";\n        flow.set(\"HEPA_Filter\", msg.payload.barometric_pressure_1);\n    }\n}\n\nmsg.topic += \"INSERT INTO `recorddevice`(`epoch`, `networkid`, `devid`, `typeid`, `temp`, `val`) VALUES (\";\nmsg.topic += String(msg.payload.epoch)+\",\";\nmsg.topic += \"'\" + String(msg.payload.networkid) + \"',\";\nmsg.topic += \"'\" + String(msg.payload.devid) + \"',\";\nmsg.topic += \"'\" + String(msg.payload.typeid) + \"',\";\nmsg.topic += String(msg.payload.temperature_1) + \",\";\nif(msg.payload.networkid == \"02\"){\n    msg.topic += String(msg.payload.barometric_pressure_1);\n}else if(msg.payload.networkid == \"03\"){\n    msg.topic += String(msg.payload.relative_humidity_1);\n}\nmsg.topic += \");\";\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 280,
        "wires": [
            [
                "a647954ae4d429aa"
            ]
        ]
    },
    {
        "id": "a647954ae4d429aa",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "2b3434178f0ac999",
            "9b0d96a526b14c55"
        ],
        "x": 1155,
        "y": 280,
        "wires": []
    },
    {
        "id": "2b3434178f0ac999",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "aadd16a462e83be5",
        "name": "link in 2",
        "links": [
            "a647954ae4d429aa",
            "f653f7df10385059"
        ],
        "x": 525,
        "y": 80,
        "wires": [
            [
                "ed77b13627de379d"
            ]
        ]
    },
    {
        "id": "dd1e1bf4fa001f32",
        "type": "link in",
        "z": "bca4771a12cb11e6",
        "g": "cbbdeba1125ca19b",
        "name": "link in 3",
        "links": [],
        "x": 265,
        "y": 80,
        "wires": [
            [
                "1ec9c25db1122edf"
            ]
        ]
    },
    {
        "id": "92b7c675366c9d8d",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 270,
        "y": 300,
        "wires": [
            [
                "f41842a72cb70323",
                "809d4e251a9cbaac"
            ]
        ]
    },
    {
        "id": "fd65d131d5f88239",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "RH_Cathlab",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0303030B0167010E0168780173DC4F97",
        "payloadType": "str",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "4c80d3fd31ff5440"
            ]
        ]
    },
    {
        "id": "797d03be49f87377",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 41",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 200,
        "wires": []
    },
    {
        "id": "7a37686efd1c39c5",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "g": "1cbfcd06637d48ad",
        "name": "  ",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "select * from monitoringdata;select * from Input Order by Number ASC;select * from Output Order by Number ASC;",
        "payload": "",
        "payloadType": "date",
        "x": 800,
        "y": 80,
        "wires": [
            [
                "4958a8f1dc7bf670"
            ]
        ]
    },
    {
        "id": "4958a8f1dc7bf670",
        "type": "mysql",
        "z": "bca4771a12cb11e6",
        "g": "1cbfcd06637d48ad",
        "mydb": "3b8e5eb93b7526d7",
        "name": " ",
        "x": 920,
        "y": 80,
        "wires": [
            [
                "a421582f2823dadb",
                "89aad2163aa4df8c"
            ]
        ]
    },
    {
        "id": "a421582f2823dadb",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "g": "1cbfcd06637d48ad",
        "name": "Init Global Variable",
        "func": "var json = {};\nflow.set(\"RelayInput\",msg.payload[1]);\nfor (let index = 0; index < Object.keys(msg.payload[0][0]).length ; index++) {\n    flow.set(Object.keys(msg.payload[0][0])[index],msg.payload[0][0][Object.keys(msg.payload[0][0])[index]]) \n    json[String(Object.keys(msg.payload[0][0])[index])] = flow.get(Object.keys(msg.payload[0][0])[index]);  \n}\njson[\"Timestamp\"] = toEpochTimeInSeconds(json.Timestamp);\nmsg.payload = [json,msg.payload[1]];\nreturn msg;\n\nfunction toEpochTimeInSeconds(dateString) {\n    return Math.floor(new Date(dateString).getTime());\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 80,
        "wires": [
            [
                "62a153d4d974c23e"
            ]
        ]
    },
    {
        "id": "62a153d4d974c23e",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "g": "1cbfcd06637d48ad",
        "name": "debug 43",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1260,
        "y": 80,
        "wires": []
    },
    {
        "id": "fb1bf2e163b3c7a9",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": " Relay",
        "func": "msg.deviceinfo = msg.payload[0];\nmsg.topic = \"\";\nif(msg.deviceinfo.keterangan == \"RelayInput\"){\n    var RelayInput = flow.get(\"RelayInput\");\n    msg.deviceinfo[\"InputVal\"] = hexToBinary(msg.realdata.substring(8,10));\n    if(msg.deviceinfo.InputVal == \"11111111\"){\n        RelayInput[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayInput.length; index++) {\n            RelayInput[index][\"Stat\"] = 0;\n        }\n        msg.topic += \"UPDATE `Input` SET `Stat` = 0;\";\n    }else{\n        RelayInput[0][\"Stat\"] = 0;\n        for (let index = 0; index < msg.deviceinfo.InputVal.length; index++) {\n            if(msg.deviceinfo.InputVal[index] == \"0\"){\n                msg.topic += \"UPDATE `Input` SET `Stat` = 1 WHERE `Number` = \"+String(index+1)+\";\";\n                RelayInput[index+1][\"Stat\"] = 1;\n            }else if(msg.deviceinfo.InputVal[index] == \"1\"){\n                msg.topic += \"UPDATE `Input` SET `Stat` = 0 WHERE `Number` = \"+String(index+1)+\";\";\n                RelayInput[index+1][\"Stat\"] = 0;\n            }\n        }\n    }\n    flow.set(\"RelayInput\", RelayInput);\n}else if(msg.deviceinfo.keterangan == \"RelayOutput\"){\n    var RelayOutput = flow.get(\"RelayOutput\");\n    msg.deviceinfo[\"OutputVal\"] = decimalToReversedBinary(msg.realdata.substring(8,10));\n    if (msg.deviceinfo.OutputVal == \"00000000\"){\n        RelayOutput[0][\"Stat\"] = 1;\n        for (let index = 1; index < RelayOutput.length; index++) {\n            RelayOutput[index][\"Stat\"] = 0;\n        }\n        msg.topic += \"UPDATE `Output` SET `Stat` = 0;\";\n    }else{\n        RelayOutput[0][\"Stat\"] = 0;\n        for (let index = 0; index < msg.deviceinfo.OutputVal.length; index++) {\n            if(msg.deviceinfo.OutputVal[index] == \"0\"){\n                msg.topic += \"UPDATE `Output` SET `Stat` = 1 WHERE `Number` = \"+String(index+1)+\";\";\n                RelayOutput[index+1][\"Stat\"] = 1;\n            }else if(msg.deviceinfo.OutputVal[index] == \"1\"){\n                msg.topic += \"UPDATE `Output` SET `Stat` = 0 WHERE `Number` = \"+String(index+1)+\";\";\n                RelayOutput[index+1][\"Stat\"] = 0;\n            }\n        }\n    }\n}\nreturn msg;\n\nfunction hexToBinary(hexString) {\n    // Parse the hexadecimal string to an integer\n    const intValue = parseInt(hexString, 16);\n\n    // Convert the integer to a binary string\n    let binaryString = intValue.toString(2);\n\n    // Pad the binary string with leading zeros if necessary\n    // Assuming each hex digit should be represented by 4 binary digits\n    const hexLength = hexString.length;\n    const expectedBinaryLength = hexLength * 4;\n    while (binaryString.length < expectedBinaryLength) {\n        binaryString = '0'.concat(binaryString);\n    }\n\n    return binaryString;\n}\n\nfunction decimalToReversedBinary(decimal) {\n    // Convert the decimal number to a binary string\n    let binaryString = decimal.toString(2);\n\n    // Pad the binary string with leading zeros to ensure it has a length of 4 bits\n    while (binaryString.length < 4) {\n        binaryString = '0'.concat(binaryString);\n    }\n\n    // Reverse the binary string\n    const reversedBinaryString = binaryString.split('').reverse().join('');\n\n    return reversedBinaryString;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 320,
        "wires": [
            [
                "cbe77e3b5f568059",
                "f653f7df10385059"
            ]
        ]
    },
    {
        "id": "809d4e251a9cbaac",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 44",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 360,
        "wires": []
    },
    {
        "id": "254b9d7070f0e133",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "RelayInputChannel1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "040200007F00000079",
        "payloadType": "str",
        "x": 130,
        "y": 160,
        "wires": [
            [
                "4c80d3fd31ff5440"
            ]
        ]
    },
    {
        "id": "cbe77e3b5f568059",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 45",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 820,
        "y": 320,
        "wires": []
    },
    {
        "id": "2f2920dd4524f8a1",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 46",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 400,
        "wires": []
    },
    {
        "id": "89aad2163aa4df8c",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 47",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 160,
        "wires": []
    },
    {
        "id": "4b38f87de902f1bd",
        "type": "inject",
        "z": "bca4771a12cb11e6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 620,
        "y": 460,
        "wires": [
            [
                "624c82fc1ad9708f"
            ]
        ]
    },
    {
        "id": "624c82fc1ad9708f",
        "type": "function",
        "z": "bca4771a12cb11e6",
        "name": "function 1",
        "func": "var one = 0\nmsg.payload = !one;\nmsg.topic = \"\";\nfor (let index = 0; index < 9; index++) {\n    msg.topic += \"UPDATE `Output` SET `Dec` = '\"+String(index)+\"' WHERE `Number` = \"+String(index)+\";\";\n    \n}\nreturn msg;\n\nfunction hexToBinary(hexString) {\n    // Parse the hexadecimal string to an integer\n    const intValue = parseInt(hexString, 16);\n\n    // Convert the integer to a binary string\n    let binaryString = intValue.toString(2);\n\n    // Pad the binary string with leading zeros if necessary\n    // Assuming each hex digit should be represented by 4 binary digits\n    const hexLength = hexString.length;\n    const expectedBinaryLength = hexLength * 4;\n    while (binaryString.length < expectedBinaryLength) {\n        binaryString = '0'.concat(binaryString);\n    }\n\n    return binaryString;\n}",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 460,
        "wires": [
            [
                "c09b7f80e5ac0a0c"
            ]
        ]
    },
    {
        "id": "c09b7f80e5ac0a0c",
        "type": "debug",
        "z": "bca4771a12cb11e6",
        "name": "debug 48",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 460,
        "wires": []
    },
    {
        "id": "f653f7df10385059",
        "type": "link out",
        "z": "bca4771a12cb11e6",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "2b3434178f0ac999",
            "9b0d96a526b14c55"
        ],
        "x": 775,
        "y": 360,
        "wires": []
    },
    {
        "id": "e1f5480776bb23d2",
        "type": "debug",
        "z": "57a8e6e09724ec39",
        "g": "ce6092360da2da00",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 100,
        "wires": []
    },
    {
        "id": "679d1f1d321ffb54",
        "type": "mysql",
        "z": "57a8e6e09724ec39",
        "g": "ce6092360da2da00",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 540,
        "y": 100,
        "wires": [
            [
                "e1f5480776bb23d2"
            ]
        ]
    },
    {
        "id": "64b8533b0b2f03ad",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "ce6092360da2da00",
        "name": "Select Value",
        "func": "msg.topic = \"SELECT * FROM MonitoringData\";\n// msg.topic = \"SELECT Temp_Cathlab FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 100,
        "wires": [
            [
                "679d1f1d321ffb54"
            ]
        ]
    },
    {
        "id": "4b43c6dce1977e9c",
        "type": "inject",
        "z": "57a8e6e09724ec39",
        "g": "ce6092360da2da00",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 100,
        "wires": [
            [
                "64b8533b0b2f03ad"
            ]
        ]
    },
    {
        "id": "537397df410d682a",
        "type": "http in",
        "z": "57a8e6e09724ec39",
        "g": "6b4d024ab7b25c4c",
        "name": "",
        "url": "/getData",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 220,
        "wires": [
            [
                "5b08597283a9c34f"
            ]
        ]
    },
    {
        "id": "6a4a06a45fb80d04",
        "type": "mysql",
        "z": "57a8e6e09724ec39",
        "g": "6b4d024ab7b25c4c",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 580,
        "y": 220,
        "wires": [
            [
                "4dbe83f2e3ecf6f0"
            ]
        ]
    },
    {
        "id": "5b08597283a9c34f",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "6b4d024ab7b25c4c",
        "name": "Query",
        "func": "// msg.topic = \"SELECT Temp_Machine FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\nmsg.topic = \"SELECT * FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 220,
        "wires": [
            [
                "6a4a06a45fb80d04"
            ]
        ]
    },
    {
        "id": "4dbe83f2e3ecf6f0",
        "type": "http response",
        "z": "57a8e6e09724ec39",
        "g": "6b4d024ab7b25c4c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 220,
        "wires": []
    },
    {
        "id": "04f4b623aa95ece0",
        "type": "http in",
        "z": "57a8e6e09724ec39",
        "g": "6b4d024ab7b25c4c",
        "name": "",
        "url": "/getDataSetting",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "03eda52da48cfdbb"
            ]
        ]
    },
    {
        "id": "03eda52da48cfdbb",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "6b4d024ab7b25c4c",
        "name": "Query",
        "func": "// msg.topic = \"SELECT Temp_Machine FROM monitoringdata ORDER BY ID DESC LIMIT 1\";\nmsg.topic = \"SELECT * FROM setting  LIMIT 1\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 280,
        "wires": [
            [
                "62276a9f2eb4a7c4"
            ]
        ]
    },
    {
        "id": "b3cade89519d6d84",
        "type": "http response",
        "z": "57a8e6e09724ec39",
        "g": "6b4d024ab7b25c4c",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 280,
        "wires": []
    },
    {
        "id": "62276a9f2eb4a7c4",
        "type": "mysql",
        "z": "57a8e6e09724ec39",
        "g": "6b4d024ab7b25c4c",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 580,
        "y": 280,
        "wires": [
            [
                "b3cade89519d6d84"
            ]
        ]
    },
    {
        "id": "3b27314051618ab0",
        "type": "mysql",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 950,
        "y": 400,
        "wires": [
            [
                "438b8b5fb2428a49"
            ]
        ]
    },
    {
        "id": "438b8b5fb2428a49",
        "type": "http response",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1100,
        "y": 400,
        "wires": []
    },
    {
        "id": "3b7f62e540788fca",
        "type": "http in",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "",
        "url": "/setDataTemp",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 400,
        "wires": [
            [
                "f8431f71d42202f0"
            ]
        ]
    },
    {
        "id": "f8431f71d42202f0",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 400,
        "wires": [
            [
                "58982a5216ccf1d1"
            ]
        ]
    },
    {
        "id": "58982a5216ccf1d1",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "UPDATE setting SET TempCathlab",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET TempCathlab = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 400,
        "wires": [
            [
                "3b27314051618ab0"
            ]
        ]
    },
    {
        "id": "069d507abaacbd5a",
        "type": "http in",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "",
        "url": "/setDataRH",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 440,
        "wires": [
            [
                "676bf34c056ee6d4"
            ]
        ]
    },
    {
        "id": "676bf34c056ee6d4",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 440,
        "wires": [
            [
                "391b6164f4fe416c"
            ]
        ]
    },
    {
        "id": "391b6164f4fe416c",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "UPDATE setting SET RHCathlab",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET RHCathlab = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 440,
        "wires": [
            [
                "3b27314051618ab0"
            ]
        ]
    },
    {
        "id": "c433113f1901e9f8",
        "type": "http in",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "",
        "url": "/setDataTempM",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 480,
        "wires": [
            [
                "a775b6857b7fe93a"
            ]
        ]
    },
    {
        "id": "a775b6857b7fe93a",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 480,
        "wires": [
            [
                "3636da8784705a68"
            ]
        ]
    },
    {
        "id": "3636da8784705a68",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "UPDATE setting SET TempMachine ",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET TempMachine = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 480,
        "wires": [
            [
                "3b27314051618ab0"
            ]
        ]
    },
    {
        "id": "fb33186f80d938cb",
        "type": "http in",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "",
        "url": "/setDataRHM",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 520,
        "wires": [
            [
                "f5584635e347aee0"
            ]
        ]
    },
    {
        "id": "f5584635e347aee0",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "Extract Value",
        "func": "var value = parseInt(msg.req.query.value);\nmsg.payload = { value: value };\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 520,
        "wires": [
            [
                "9984221615af2d3c"
            ]
        ]
    },
    {
        "id": "9984221615af2d3c",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "525e434a306529fc",
        "name": "UPDATE setting SET RHMachine",
        "func": "var value = msg.payload.value;\nvar query = `UPDATE setting SET RHMachine = ${value}`;\nmsg.topic = query;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 520,
        "wires": [
            [
                "3b27314051618ab0"
            ]
        ]
    },
    {
        "id": "7b7a09cf.1e6d24",
        "type": "function",
        "z": "57a8e6e09724ec39",
        "g": "f748addfc5106e47",
        "name": "Prepare data for inserting into the database",
        "func": "// Generate sample data to insert\nconst data = {\n    Timestamp: new Date(),\n    Temp_Cathlab: 25.5,\n    RH_Cathlab: 60,\n    Temp_Machine: 27.8,\n    RH_Machine: 55.5,\n    Outdoor_Unit: 1,\n    AHU_Status: 1,\n    Pre_Filter: 155,\n    HEPA_Filter: 155,\n    Booster_Fan: 1,\n    Exhaust_Fan: 1,\n    Heater_1: 1,\n    Heater_2: 1\n};\n\n// Construct the SQL query\nconst keys = Object.keys(data);\nconst values = Object.values(data).map(value => typeof value === 'string' ? '${value}' : value);\nconst placeholders = keys.map(() => '?').join(',');\nconst query = `INSERT INTO monitoringdata (${keys.join(',')}) VALUES (${placeholders})`;\n\n// Set the query as payload for the next node\nmsg.topic = query;\nmsg.payload = values;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 660,
        "wires": [
            [
                "801c75c13c587a80"
            ]
        ]
    },
    {
        "id": "fde57690.944ea8",
        "type": "inject",
        "z": "57a8e6e09724ec39",
        "g": "f748addfc5106e47",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 660,
        "wires": [
            [
                "7b7a09cf.1e6d24"
            ]
        ]
    },
    {
        "id": "810bb31b564b3d49",
        "type": "debug",
        "z": "57a8e6e09724ec39",
        "g": "f748addfc5106e47",
        "name": "debug 35",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 660,
        "wires": []
    },
    {
        "id": "801c75c13c587a80",
        "type": "mysql",
        "z": "57a8e6e09724ec39",
        "g": "f748addfc5106e47",
        "mydb": "3b8e5eb93b7526d7",
        "name": "",
        "x": 880,
        "y": 660,
        "wires": [
            [
                "810bb31b564b3d49"
            ]
        ]
    }
]